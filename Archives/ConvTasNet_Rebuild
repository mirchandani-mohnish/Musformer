{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"nvidiaTeslaT4","dataSources":[{"sourceId":10005918,"sourceType":"datasetVersion","datasetId":6159348}],"dockerImageVersionId":30919,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2025-04-09T23:25:26.814606Z","iopub.execute_input":"2025-04-09T23:25:26.814951Z","iopub.status.idle":"2025-04-09T23:25:27.241968Z","shell.execute_reply.started":"2025-04-09T23:25:26.814924Z","shell.execute_reply":"2025-04-09T23:25:27.240911Z"}},"outputs":[{"name":"stdout","text":"/kaggle/input/musdb18-music-source-separation-dataset/The Long Wait - Dark Horses.stem.mp4\n/kaggle/input/musdb18-music-source-separation-dataset/test/Raft Monk - Tiring.stem.mp4\n/kaggle/input/musdb18-music-source-separation-dataset/test/BKS - Too Much.stem.mp4\n/kaggle/input/musdb18-music-source-separation-dataset/test/Georgia Wonder - Siren.stem.mp4\n/kaggle/input/musdb18-music-source-separation-dataset/test/The Sunshine Garcia Band - For I Am The Moon.stem.mp4\n/kaggle/input/musdb18-music-source-separation-dataset/test/Enda Reilly - Cur An Long Ag Seol.stem.mp4\n/kaggle/input/musdb18-music-source-separation-dataset/test/Buitraker - Revo X.stem.mp4\n/kaggle/input/musdb18-music-source-separation-dataset/test/We Fell From The Sky - Not You.stem.mp4\n/kaggle/input/musdb18-music-source-separation-dataset/test/The Mountaineering Club - Mallory.stem.mp4\n/kaggle/input/musdb18-music-source-separation-dataset/test/Skelpolu - Resurrection.stem.mp4\n/kaggle/input/musdb18-music-source-separation-dataset/test/Secretariat - Over The Top.stem.mp4\n/kaggle/input/musdb18-music-source-separation-dataset/test/Bobby Nobody - Stitch Up.stem.mp4\n/kaggle/input/musdb18-music-source-separation-dataset/test/Arise - Run Run Run.stem.mp4\n/kaggle/input/musdb18-music-source-separation-dataset/test/Carlos Gonzalez - A Place For Us.stem.mp4\n/kaggle/input/musdb18-music-source-separation-dataset/test/Forkupines - Semantics.stem.mp4\n/kaggle/input/musdb18-music-source-separation-dataset/test/The Easton Ellises - Falcon 69.stem.mp4\n/kaggle/input/musdb18-music-source-separation-dataset/test/Lyndsey Ollard - Catching Up.stem.mp4\n/kaggle/input/musdb18-music-source-separation-dataset/test/Triviul feat. The Fiend - Widow.stem.mp4\n/kaggle/input/musdb18-music-source-separation-dataset/test/Louis Cressy Band - Good Time.stem.mp4\n/kaggle/input/musdb18-music-source-separation-dataset/test/Motor Tapes - Shore.stem.mp4\n/kaggle/input/musdb18-music-source-separation-dataset/test/AM Contra - Heart Peripheral.stem.mp4\n/kaggle/input/musdb18-music-source-separation-dataset/test/Signe Jakobsen - What Have You Done To Me.stem.mp4\n/kaggle/input/musdb18-music-source-separation-dataset/test/Moosmusic - Big Dummy Shake.stem.mp4\n/kaggle/input/musdb18-music-source-separation-dataset/test/M.E.R.C. Music - Knockout.stem.mp4\n/kaggle/input/musdb18-music-source-separation-dataset/test/The Doppler Shift - Atrophy.stem.mp4\n/kaggle/input/musdb18-music-source-separation-dataset/test/Detsky Sad - Walkie Talkie.stem.mp4\n/kaggle/input/musdb18-music-source-separation-dataset/test/PR - Happy Daze.stem.mp4\n/kaggle/input/musdb18-music-source-separation-dataset/test/Timboz - Pony.stem.mp4\n/kaggle/input/musdb18-music-source-separation-dataset/test/PR - Oh No.stem.mp4\n/kaggle/input/musdb18-music-source-separation-dataset/test/Mu - Too Bright.stem.mp4\n/kaggle/input/musdb18-music-source-separation-dataset/test/Hollow Ground - Ill Fate.stem.mp4\n/kaggle/input/musdb18-music-source-separation-dataset/test/The Easton Ellises (Baumi) - SDRNR.stem.mp4\n/kaggle/input/musdb18-music-source-separation-dataset/test/Speak Softly - Like Horses.stem.mp4\n/kaggle/input/musdb18-music-source-separation-dataset/test/Sambasevam Shanmugam - Kaathaadi.stem.mp4\n/kaggle/input/musdb18-music-source-separation-dataset/test/Tom McKenzie - Directions.stem.mp4\n/kaggle/input/musdb18-music-source-separation-dataset/test/Secretariat - Borderline.stem.mp4\n/kaggle/input/musdb18-music-source-separation-dataset/test/Side Effects Project - Sing With Me.stem.mp4\n/kaggle/input/musdb18-music-source-separation-dataset/test/Nerve 9 - Pray For The Rain.stem.mp4\n/kaggle/input/musdb18-music-source-separation-dataset/test/Zeno - Signs.stem.mp4\n/kaggle/input/musdb18-music-source-separation-dataset/test/Girls Under Glass - We Feel Alright.stem.mp4\n/kaggle/input/musdb18-music-source-separation-dataset/test/Cristina Vane - So Easy.stem.mp4\n/kaggle/input/musdb18-music-source-separation-dataset/test/Speak Softly - Broken Man.stem.mp4\n/kaggle/input/musdb18-music-source-separation-dataset/test/BKS - Bulldozer.stem.mp4\n/kaggle/input/musdb18-music-source-separation-dataset/test/Punkdisco - Oral Hygiene.stem.mp4\n/kaggle/input/musdb18-music-source-separation-dataset/test/Al James - Schoolboy Facination.stem.mp4\n/kaggle/input/musdb18-music-source-separation-dataset/train/Dark Ride - Burning Bridges.stem.mp4\n/kaggle/input/musdb18-music-source-separation-dataset/train/Drumtracks - Ghost Bitch.stem.mp4\n/kaggle/input/musdb18-music-source-separation-dataset/train/Aimee Norwich - Child.stem.mp4\n/kaggle/input/musdb18-music-source-separation-dataset/train/James May - If You Say.stem.mp4\n/kaggle/input/musdb18-music-source-separation-dataset/train/Music Delta - Rockabilly.stem.mp4\n/kaggle/input/musdb18-music-source-separation-dataset/train/Steven Clark - Bounty.stem.mp4\n/kaggle/input/musdb18-music-source-separation-dataset/train/Giselle - Moss.stem.mp4\n/kaggle/input/musdb18-music-source-separation-dataset/train/Strand Of Oaks - Spacestation.stem.mp4\n/kaggle/input/musdb18-music-source-separation-dataset/train/Patrick Talbot - Set Me Free.stem.mp4\n/kaggle/input/musdb18-music-source-separation-dataset/train/Bill Chudziak - Children Of No-one.stem.mp4\n/kaggle/input/musdb18-music-source-separation-dataset/train/Angela Thomas Wade - Milk Cow Blues.stem.mp4\n/kaggle/input/musdb18-music-source-separation-dataset/train/Grants - PunchDrunk.stem.mp4\n/kaggle/input/musdb18-music-source-separation-dataset/train/Music Delta - Grunge.stem.mp4\n/kaggle/input/musdb18-music-source-separation-dataset/train/Traffic Experiment - Once More (With Feeling).stem.mp4\n/kaggle/input/musdb18-music-source-separation-dataset/train/Music Delta - Beatles.stem.mp4\n/kaggle/input/musdb18-music-source-separation-dataset/train/Auctioneer - Our Future Faces.stem.mp4\n/kaggle/input/musdb18-music-source-separation-dataset/train/Clara Berry And Wooldog - Air Traffic.stem.mp4\n/kaggle/input/musdb18-music-source-separation-dataset/train/Patrick Talbot - A Reason To Leave.stem.mp4\n/kaggle/input/musdb18-music-source-separation-dataset/train/The Districts - Vermont.stem.mp4\n/kaggle/input/musdb18-music-source-separation-dataset/train/Leaf - Come Around.stem.mp4\n/kaggle/input/musdb18-music-source-separation-dataset/train/North To Alaska - All The Same.stem.mp4\n/kaggle/input/musdb18-music-source-separation-dataset/train/Skelpolu - Human Mistakes.stem.mp4\n/kaggle/input/musdb18-music-source-separation-dataset/train/Dreamers Of The Ghetto - Heavy Love.stem.mp4\n/kaggle/input/musdb18-music-source-separation-dataset/train/ANiMAL - Rockshow.stem.mp4\n/kaggle/input/musdb18-music-source-separation-dataset/train/Faces On Film - Waiting For Ga.stem.mp4\n/kaggle/input/musdb18-music-source-separation-dataset/train/Snowmine - Curfews.stem.mp4\n/kaggle/input/musdb18-music-source-separation-dataset/train/Swinging Steaks - Lost My Way.stem.mp4\n/kaggle/input/musdb18-music-source-separation-dataset/train/Triviul - Dorothy.stem.mp4\n/kaggle/input/musdb18-music-source-separation-dataset/train/Music Delta - Gospel.stem.mp4\n/kaggle/input/musdb18-music-source-separation-dataset/train/Clara Berry And Wooldog - Stella.stem.mp4\n/kaggle/input/musdb18-music-source-separation-dataset/train/Music Delta - Disco.stem.mp4\n/kaggle/input/musdb18-music-source-separation-dataset/train/Music Delta - Reggae.stem.mp4\n/kaggle/input/musdb18-music-source-separation-dataset/train/The So So Glos - Emergency.stem.mp4\n/kaggle/input/musdb18-music-source-separation-dataset/train/Leaf - Wicked.stem.mp4\n/kaggle/input/musdb18-music-source-separation-dataset/train/St Vitus - Word Gets Around.stem.mp4\n/kaggle/input/musdb18-music-source-separation-dataset/train/Celestial Shore - Die For Us.stem.mp4\n/kaggle/input/musdb18-music-source-separation-dataset/train/Young Griffo - Facade.stem.mp4\n/kaggle/input/musdb18-music-source-separation-dataset/train/AvaLuna - Waterduct.stem.mp4\n/kaggle/input/musdb18-music-source-separation-dataset/train/Music Delta - Punk.stem.mp4\n/kaggle/input/musdb18-music-source-separation-dataset/train/Actions - One Minute Smile.stem.mp4\n/kaggle/input/musdb18-music-source-separation-dataset/train/Young Griffo - Blood To Bone.stem.mp4\n/kaggle/input/musdb18-music-source-separation-dataset/train/Tim Taler - Stalker.stem.mp4\n/kaggle/input/musdb18-music-source-separation-dataset/train/Music Delta - Hendrix.stem.mp4\n/kaggle/input/musdb18-music-source-separation-dataset/train/Leaf - Summerghost.stem.mp4\n/kaggle/input/musdb18-music-source-separation-dataset/train/Hop Along - Sister Cities.stem.mp4\n/kaggle/input/musdb18-music-source-separation-dataset/train/James May - All Souls Moon.stem.mp4\n/kaggle/input/musdb18-music-source-separation-dataset/train/Meaxic - You Listen.stem.mp4\n/kaggle/input/musdb18-music-source-separation-dataset/train/Music Delta - Country2.stem.mp4\n/kaggle/input/musdb18-music-source-separation-dataset/train/ANiMAL - Clinic A.stem.mp4\n/kaggle/input/musdb18-music-source-separation-dataset/train/Traffic Experiment - Sirens.stem.mp4\n/kaggle/input/musdb18-music-source-separation-dataset/train/Music Delta - Britpop.stem.mp4\n/kaggle/input/musdb18-music-source-separation-dataset/train/Music Delta - Rock.stem.mp4\n/kaggle/input/musdb18-music-source-separation-dataset/train/Chris Durban - Celebrate.stem.mp4\n/kaggle/input/musdb18-music-source-separation-dataset/train/Triviul - Angelsaint.stem.mp4\n/kaggle/input/musdb18-music-source-separation-dataset/train/James May - On The Line.stem.mp4\n/kaggle/input/musdb18-music-source-separation-dataset/train/A Classic Education - NightOwl.stem.mp4\n/kaggle/input/musdb18-music-source-separation-dataset/train/Skelpolu - Together Alone.stem.mp4\n/kaggle/input/musdb18-music-source-separation-dataset/train/Titanium - Haunted Age.stem.mp4\n/kaggle/input/musdb18-music-source-separation-dataset/train/Alexander Ross - Goodbye Bolero.stem.mp4\n/kaggle/input/musdb18-music-source-separation-dataset/train/Secret Mountains - High Horse.stem.mp4\n/kaggle/input/musdb18-music-source-separation-dataset/train/Wall Of Death - Femme.stem.mp4\n/kaggle/input/musdb18-music-source-separation-dataset/train/Fergessen - The Wind.stem.mp4\n/kaggle/input/musdb18-music-source-separation-dataset/train/Alexander Ross - Velvet Curtain.stem.mp4\n/kaggle/input/musdb18-music-source-separation-dataset/train/Johnny Lokke - Whisper To A Scream.stem.mp4\n/kaggle/input/musdb18-music-source-separation-dataset/train/Meaxic - Take A Step.stem.mp4\n/kaggle/input/musdb18-music-source-separation-dataset/train/Jay Menon - Through My Eyes.stem.mp4\n/kaggle/input/musdb18-music-source-separation-dataset/train/Flags - 54.stem.mp4\n/kaggle/input/musdb18-music-source-separation-dataset/train/Clara Berry And Wooldog - Waltz For My Victims.stem.mp4\n/kaggle/input/musdb18-music-source-separation-dataset/train/ANiMAL - Easy Tiger.stem.mp4\n/kaggle/input/musdb18-music-source-separation-dataset/train/Fergessen - Back From The Start.stem.mp4\n/kaggle/input/musdb18-music-source-separation-dataset/train/Hollow Ground - Left Blind.stem.mp4\n/kaggle/input/musdb18-music-source-separation-dataset/train/Sweet Lights - You Let Me Down.stem.mp4\n/kaggle/input/musdb18-music-source-separation-dataset/train/Port St Willow - Stay Even.stem.mp4\n/kaggle/input/musdb18-music-source-separation-dataset/train/Helado Negro - Mitad Del Mundo.stem.mp4\n/kaggle/input/musdb18-music-source-separation-dataset/train/Black Bloc - If You Want Success.stem.mp4\n/kaggle/input/musdb18-music-source-separation-dataset/train/Young Griffo - Pennies.stem.mp4\n/kaggle/input/musdb18-music-source-separation-dataset/train/Voelund - Comfort Lives In Belief.stem.mp4\n/kaggle/input/musdb18-music-source-separation-dataset/train/Fergessen - Nos Palpitants.stem.mp4\n/kaggle/input/musdb18-music-source-separation-dataset/train/Creepoid - OldTree.stem.mp4\n/kaggle/input/musdb18-music-source-separation-dataset/train/Actions - South Of The Water.stem.mp4\n/kaggle/input/musdb18-music-source-separation-dataset/train/Lushlife - Toynbee Suite.stem.mp4\n/kaggle/input/musdb18-music-source-separation-dataset/train/Matthew Entwistle - Dont You Ever.stem.mp4\n/kaggle/input/musdb18-music-source-separation-dataset/train/The Scarlet Brand - Les Fleurs Du Mal.stem.mp4\n/kaggle/input/musdb18-music-source-separation-dataset/train/Music Delta - Country1.stem.mp4\n/kaggle/input/musdb18-music-source-separation-dataset/train/James May - Dont Let Go.stem.mp4\n/kaggle/input/musdb18-music-source-separation-dataset/train/Music Delta - 80s Rock.stem.mp4\n/kaggle/input/musdb18-music-source-separation-dataset/train/Atlantis Bound - It Was My Fault For Waiting.stem.mp4\n/kaggle/input/musdb18-music-source-separation-dataset/train/Invisible Familiars - Disturbing Wildlife.stem.mp4\n/kaggle/input/musdb18-music-source-separation-dataset/train/Cnoc An Tursa - Bannockburn.stem.mp4\n/kaggle/input/musdb18-music-source-separation-dataset/train/Hezekiah Jones - Borrowed Heart.stem.mp4\n/kaggle/input/musdb18-music-source-separation-dataset/train/BigTroubles - Phantom.stem.mp4\n/kaggle/input/musdb18-music-source-separation-dataset/train/Remember December - C U Next Time.stem.mp4\n/kaggle/input/musdb18-music-source-separation-dataset/train/Night Panther - Fire.stem.mp4\n/kaggle/input/musdb18-music-source-separation-dataset/train/The Long Wait - Back Home To Blue.stem.mp4\n","output_type":"stream"}],"execution_count":1},{"cell_type":"markdown","source":"# ConvTasNet for Music Source Separation\n\n","metadata":{}},{"cell_type":"code","source":"!pip install musdb\n!pip install mir_eval","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-09T23:25:27.243273Z","iopub.execute_input":"2025-04-09T23:25:27.243840Z","iopub.status.idle":"2025-04-09T23:25:37.256535Z","shell.execute_reply.started":"2025-04-09T23:25:27.243803Z","shell.execute_reply":"2025-04-09T23:25:37.255491Z"}},"outputs":[{"name":"stdout","text":"Collecting musdb\n  Downloading musdb-0.4.2-py2.py3-none-any.whl.metadata (10 kB)\nRequirement already satisfied: numpy>=1.7 in /usr/local/lib/python3.10/dist-packages (from musdb) (1.26.4)\nCollecting stempeg>=0.2.3 (from musdb)\n  Downloading stempeg-0.2.3-py3-none-any.whl.metadata (9.0 kB)\nRequirement already satisfied: pyaml in /usr/local/lib/python3.10/dist-packages (from musdb) (25.1.0)\nRequirement already satisfied: tqdm in /usr/local/lib/python3.10/dist-packages (from musdb) (4.67.1)\nRequirement already satisfied: mkl_fft in /usr/local/lib/python3.10/dist-packages (from numpy>=1.7->musdb) (1.3.8)\nRequirement already satisfied: mkl_random in /usr/local/lib/python3.10/dist-packages (from numpy>=1.7->musdb) (1.2.4)\nRequirement already satisfied: mkl_umath in /usr/local/lib/python3.10/dist-packages (from numpy>=1.7->musdb) (0.1.1)\nRequirement already satisfied: mkl in /usr/local/lib/python3.10/dist-packages (from numpy>=1.7->musdb) (2025.0.1)\nRequirement already satisfied: tbb4py in /usr/local/lib/python3.10/dist-packages (from numpy>=1.7->musdb) (2022.0.0)\nRequirement already satisfied: mkl-service in /usr/local/lib/python3.10/dist-packages (from numpy>=1.7->musdb) (2.4.1)\nCollecting ffmpeg-python>=0.2.0 (from stempeg>=0.2.3->musdb)\n  Downloading ffmpeg_python-0.2.0-py3-none-any.whl.metadata (1.7 kB)\nRequirement already satisfied: PyYAML in /usr/local/lib/python3.10/dist-packages (from pyaml->musdb) (6.0.2)\nRequirement already satisfied: future in /usr/local/lib/python3.10/dist-packages (from ffmpeg-python>=0.2.0->stempeg>=0.2.3->musdb) (1.0.0)\nRequirement already satisfied: intel-openmp>=2024 in /usr/local/lib/python3.10/dist-packages (from mkl->numpy>=1.7->musdb) (2024.2.0)\nRequirement already satisfied: tbb==2022.* in /usr/local/lib/python3.10/dist-packages (from mkl->numpy>=1.7->musdb) (2022.0.0)\nRequirement already satisfied: tcmlib==1.* in /usr/local/lib/python3.10/dist-packages (from tbb==2022.*->mkl->numpy>=1.7->musdb) (1.2.0)\nRequirement already satisfied: intel-cmplr-lib-rt in /usr/local/lib/python3.10/dist-packages (from mkl_umath->numpy>=1.7->musdb) (2024.2.0)\nRequirement already satisfied: intel-cmplr-lib-ur==2024.2.0 in /usr/local/lib/python3.10/dist-packages (from intel-openmp>=2024->mkl->numpy>=1.7->musdb) (2024.2.0)\nDownloading musdb-0.4.2-py2.py3-none-any.whl (13 kB)\nDownloading stempeg-0.2.3-py3-none-any.whl (963 kB)\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m963.5/963.5 kB\u001b[0m \u001b[31m14.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0ma \u001b[36m0:00:01\u001b[0m\n\u001b[?25hDownloading ffmpeg_python-0.2.0-py3-none-any.whl (25 kB)\nInstalling collected packages: ffmpeg-python, stempeg, musdb\nSuccessfully installed ffmpeg-python-0.2.0 musdb-0.4.2 stempeg-0.2.3\nCollecting mir_eval\n  Downloading mir_eval-0.8.2-py3-none-any.whl.metadata (3.0 kB)\nRequirement already satisfied: numpy>=1.15.4 in /usr/local/lib/python3.10/dist-packages (from mir_eval) (1.26.4)\nRequirement already satisfied: scipy>=1.4.0 in /usr/local/lib/python3.10/dist-packages (from mir_eval) (1.13.1)\nRequirement already satisfied: decorator in /usr/local/lib/python3.10/dist-packages (from mir_eval) (4.4.2)\nRequirement already satisfied: mkl_fft in /usr/local/lib/python3.10/dist-packages (from numpy>=1.15.4->mir_eval) (1.3.8)\nRequirement already satisfied: mkl_random in /usr/local/lib/python3.10/dist-packages (from numpy>=1.15.4->mir_eval) (1.2.4)\nRequirement already satisfied: mkl_umath in /usr/local/lib/python3.10/dist-packages (from numpy>=1.15.4->mir_eval) (0.1.1)\nRequirement already satisfied: mkl in /usr/local/lib/python3.10/dist-packages (from numpy>=1.15.4->mir_eval) (2025.0.1)\nRequirement already satisfied: tbb4py in /usr/local/lib/python3.10/dist-packages (from numpy>=1.15.4->mir_eval) (2022.0.0)\nRequirement already satisfied: mkl-service in /usr/local/lib/python3.10/dist-packages (from numpy>=1.15.4->mir_eval) (2.4.1)\nRequirement already satisfied: intel-openmp>=2024 in /usr/local/lib/python3.10/dist-packages (from mkl->numpy>=1.15.4->mir_eval) (2024.2.0)\nRequirement already satisfied: tbb==2022.* in /usr/local/lib/python3.10/dist-packages (from mkl->numpy>=1.15.4->mir_eval) (2022.0.0)\nRequirement already satisfied: tcmlib==1.* in /usr/local/lib/python3.10/dist-packages (from tbb==2022.*->mkl->numpy>=1.15.4->mir_eval) (1.2.0)\nRequirement already satisfied: intel-cmplr-lib-rt in /usr/local/lib/python3.10/dist-packages (from mkl_umath->numpy>=1.15.4->mir_eval) (2024.2.0)\nRequirement already satisfied: intel-cmplr-lib-ur==2024.2.0 in /usr/local/lib/python3.10/dist-packages (from intel-openmp>=2024->mkl->numpy>=1.15.4->mir_eval) (2024.2.0)\nDownloading mir_eval-0.8.2-py3-none-any.whl (102 kB)\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m102.8/102.8 kB\u001b[0m \u001b[31m3.5 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n\u001b[?25hInstalling collected packages: mir_eval\nSuccessfully installed mir_eval-0.8.2\n","output_type":"stream"}],"execution_count":2},{"cell_type":"code","source":"\n%%capture\n# Installing SpeechBrain via pip\nBRANCH = 'develop'\n!python -m pip install git+https://github.com/speechbrain/speechbrain.git@$BRANCH\n\n# Clone SpeechBrain repository\n!git clone https://github.com/speechbrain/speechbrain/","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-09T23:25:37.258172Z","iopub.execute_input":"2025-04-09T23:25:37.258430Z","iopub.status.idle":"2025-04-09T23:25:57.919400Z","shell.execute_reply.started":"2025-04-09T23:25:37.258408Z","shell.execute_reply":"2025-04-09T23:25:57.918490Z"}},"outputs":[],"execution_count":3},{"cell_type":"code","source":"db_path = '/kaggle/input/musdb18-music-source-separation-dataset'\noutput_path = '/kaggle/working'","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-09T23:25:57.920648Z","iopub.execute_input":"2025-04-09T23:25:57.920967Z","iopub.status.idle":"2025-04-09T23:25:57.924485Z","shell.execute_reply.started":"2025-04-09T23:25:57.920937Z","shell.execute_reply":"2025-04-09T23:25:57.923871Z"}},"outputs":[],"execution_count":4},{"cell_type":"markdown","source":"## Data and Dataset","metadata":{}},{"cell_type":"code","source":"%%file hparams.yaml\n# ################################\n# Model: ConvTasNet for Music vocal separation\n# https://arxiv.org/abs/2010.13154\n# Dataset : WSJ0-2mix and WSJ0-3mix\n# ################################\n# Basic parameters\n# Seed needs to be set at top of yaml, before objects with parameters are made\n#\n\nseed: 1234\n__set_seed: !apply:speechbrain.utils.seed_everything [!ref <seed>]\n\n# Data params\n\ndata_folder: !PLACEHOLDER\n\n\nexperiment_name: convtasnet\noutput_folder: !ref /kaggle/working/results/<experiment_name>/<seed>\ntrain_log: !ref <output_folder>/train_log.txt\nsave_folder: !ref <output_folder>/save\ntrain_data: !ref <output_folder>/train.json\nvalid_data: !ref <output_folder>/valid.json\ntest_data: !ref <output_folder>/test.json\nskip_prep: False\ndb_path: '/kaggle/input/musdb18-music-source-separation-dataset'\n\n\n# Experiment params\nprecision: fp16 # bf16, fp16 or fp32\n\ninstrumental_classification: False\nnoprogressbar: False\nsave_audio: True # Save estimated sources on disk\nsample_rate: 16000\nn_audio_to_save: 10\n\n####################### Training Parameters ####################################\nN_epochs: 3\nbatch_size: 1\nlr: 0.00015\nclip_grad_norm: 5\nloss_upper_lim: 999999  # this is the upper limit for an acceptable loss\nnum_sources: 2\n# # if True, the training sequences are cut to a specified length\n# limit_training_signal_len: True\n# # this is the length of sequences if we choose to limit\n# # the signal length of training sequences\n# training_signal_len: 240000 # shoudl give 30 seconds of audio\n# # Set it to True to dynamically create mixtures at training time\n# dynamic_mixing: False\n\n# # Parameters for data augmentation\n# use_wavedrop: False\n# # use_speedperturb: True\n# use_rand_shift: False\n# min_shift: -8000\n# max_shift: 8000\n# \n\n# # Frequency drop: randomly drops a number of frequency bands to zero.\n# drop_freq_low: 0  # Min frequency band dropout probability\n# drop_freq_high: 1  # Max frequency band dropout probability\n# drop_freq_count_low: 1  # Min number of frequency bands to drop\n# drop_freq_count_high: 3  # Max number of frequency bands to drop\n# drop_freq_width: 0.05  # Width of frequency bands to drop\n\n# drop_freq: !new:speechbrain.augment.time_domain.DropFreq\n#     drop_freq_low: !ref <drop_freq_low>\n#     drop_freq_high: !ref <drop_freq_high>\n#     drop_freq_count_low: !ref <drop_freq_count_low>\n#     drop_freq_count_high: !ref <drop_freq_count_high>\n#     drop_freq_width: !ref <drop_freq_width>\n\n# # Time drop: randomly drops a number of temporal chunks.\n# drop_chunk_count_low: 1  # Min number of audio chunks to drop\n# drop_chunk_count_high: 5  # Max number of audio chunks to drop\n# drop_chunk_length_low: 1000  # Min length of audio chunks to drop\n# drop_chunk_length_high: 2000  # Max length of audio chunks to drop\n\n# drop_chunk: !new:speechbrain.augment.time_domain.DropChunk\n#     drop_length_low: !ref <drop_chunk_length_low>\n#     drop_length_high: !ref <drop_chunk_length_high>\n#     drop_count_low: !ref <drop_chunk_count_low>\n#     drop_count_high: !ref <drop_chunk_count_high>\n\n# loss thresholding -- this thresholds the training loss\nthreshold_byloss: True\nthreshold: -30\n\n# Encoder parameters\nN_encoder_out: 256\n# out_channels: 256\nkernel_size: 16\nkernel_stride: 8\n\n# Dataloader options\ndataloader_opts:\n    batch_size: !ref <batch_size>\n    num_workers: 1\n\n\n# Specifying the network\nEncoder: !new:speechbrain.lobes.models.dual_path.Encoder\n    kernel_size: !ref <kernel_size>\n    out_channels: !ref <N_encoder_out>\n\n# intra: !new:speechbrain.lobes.models.dual_path.SBRNNBlock\n#    num_layers: 1\n#    input_size: !ref <out_channels>\n#    hidden_channels: !ref <out_channels>\n#    dropout: 0\n#    bidirectional: True\n\n# inter: !new:speechbrain.lobes.models.dual_path.SBRNNBlock\n#    num_layers: 1\n#    input_size: !ref <out_channels>\n#    hidden_channels: !ref <out_channels>\n#    dropout: 0\n#    bidirectional: True\n\nMaskNet: !new:speechbrain.lobes.models.conv_tasnet.MaskNet\n    N: 256\n    B: 256\n    H: 512\n    P: 3\n    X: 6\n    R: 4\n    C: !ref <num_sources>\n    norm_type: 'gLN'\n    causal: True\n    mask_nonlinear: 'relu'\n\n# LSTMBlock: !new:speechbrain.nnet.RNN.LSTM\n#     hidden_size: 2048\n    \n\nDecoder: !new:speechbrain.lobes.models.dual_path.Decoder\n    in_channels: !ref <N_encoder_out>\n    out_channels: 1\n    kernel_size: !ref <kernel_size>\n    stride: !ref <kernel_stride>\n    bias: False\n\noptimizer: !name:torch.optim.Adam\n    lr: !ref <lr>\n    weight_decay: 0\n\nloss: !name:speechbrain.nnet.losses.get_si_snr_with_pitwrapper\n\nlr_scheduler: !new:speechbrain.nnet.schedulers.ReduceLROnPlateau\n    factor: 0.5\n    patience: 2\n    dont_halve_until_epoch: 85\n\nepoch_counter: !new:speechbrain.utils.epoch_loop.EpochCounter\n    limit: !ref <N_epochs>\n\nmodules:\n    encoder: !ref <Encoder>\n    decoder: !ref <Decoder>\n    masknet: !ref <MaskNet>\n\ncheckpointer: !new:speechbrain.utils.checkpoints.Checkpointer\n    checkpoints_dir: !ref <save_folder>\n    recoverables:\n        encoder: !ref <Encoder>\n        decoder: !ref <Decoder>\n        masknet: !ref <MaskNet>\n        counter: !ref <epoch_counter>\n        lr_scheduler: !ref <lr_scheduler>\n\ntrain_logger: !new:speechbrain.utils.train_logger.FileTrainLogger\n    save_file: !ref <train_log>","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-09T23:25:57.925430Z","iopub.execute_input":"2025-04-09T23:25:57.925706Z","iopub.status.idle":"2025-04-09T23:25:57.960974Z","shell.execute_reply.started":"2025-04-09T23:25:57.925676Z","shell.execute_reply":"2025-04-09T23:25:57.959862Z"}},"outputs":[{"name":"stdout","text":"Writing hparams.yaml\n","output_type":"stream"}],"execution_count":5},{"cell_type":"code","source":"%%file train.py\n#!/usr/bin/env/python3\n\"\"\"Recipe for training a neural speech separation system on the wsjmix\ndataset. The system employs an encoder, a decoder, and a masking network.\n\nTo run this recipe, do the following:\n> python train.py hparams/sepformer.yaml\n> python train.py hparams/dualpath_rnn.yaml\n> python train.py hparams/convtasnet.yaml\n\nThe experiment file is flexible enough to support different neural\nnetworks. By properly changing the parameter files, you can try\ndifferent architectures. The script supports both wsj2mix and\nwsj3mix.\n\n\nAuthors\n * Cem Subakan 2020\n * Mirco Ravanelli 2020\n * Samuele Cornell 2020\n * Mirko Bronzi 2020\n * Jianyuan Zhong 2020\n\"\"\"\n\nimport csv\nimport os\nimport sys\n\nimport numpy as np\nimport torch\nimport torch.nn.functional as F\nimport torchaudio\nfrom hyperpyyaml import load_hyperpyyaml\nfrom tqdm import tqdm\nimport pdb\n\nimport musdb\nimport torchaudio\nimport numpy as np\nfrom torch.utils.data import Dataset\nimport speechbrain as sb\nimport psutil\n\n\nimport speechbrain as sb\nimport speechbrain.nnet.schedulers as schedulers\nfrom speechbrain.core import AMPConfig\nfrom speechbrain.utils.distributed import run_on_main\nfrom speechbrain.utils.logger import get_logger\nimport time\nfrom torch.utils.data import DataLoader\n\nimport musdb\n\n\nclass LazyMusDBDataset(Dataset):\n    def __init__(self, root, subset=\"train\", split=None, target_sr=8000, chunk_size=15):\n        \"\"\"\n        True lazy-loading for MUSDB\n        :param chunk_size: in seconds\n        \"\"\"\n        if split is not None:\n            self.db = musdb.DB(root=root, subsets=subset, split=split, is_wav=False)\n        else:\n            self.db = musdb.DB(root=root, subsets=subset, is_wav=False)\n        self.target_sr = target_sr\n        self.chunk_size = chunk_size\n        self.tracks = [{\n            \"path\": track.path,\n            \"duration\": track.duration,\n            \"rate\": track.rate,\n            \"stem_id\": track.stem_id  # Needed for STEM access\n        } for track in self.db.tracks]\n\n    def __len__(self):\n        return len(self.tracks)\n\n    def __getitem__(self, idx):\n        track_info = self.tracks[idx]\n        \n        # Load chunk directly from disk without full track loading\n        def load_stem_chunk(stem_name, random_chunk_val=0):\n            # MUSDB's internal lazy loading\n            track = self.db.tracks[idx]\n            if stem_name == \"mix\":\n                source = track\n            else:\n                source = track.targets[stem_name]\n            \n            # Calculate chunk bounds\n            start = random_chunk_val\n            stop = start + self.chunk_size * track_info[\"rate\"]\n            \n            # Load only the needed segment\n            audio = source.audio[start:stop]\n            \n            # Convert and resample\n            audio_tensor = torch.from_numpy(audio).float().permute(1, 0)\n            return torchaudio.functional.resample(\n                audio_tensor,\n                orig_freq=track_info[\"rate\"],\n                new_freq=self.target_sr\n            ).mean(dim=0, keepdim=False)\n            \n        \n            # chunk_size = orig_sr * chunk_size_seconds  # Convert chunk size to samples\n        \n            # resampled_chunks = []\n        \n            # for i in range(0, audio_tensor.shape[1], chunk_size):\n            #     chunk = audio_tensor[:, i:i + chunk_size]  # Extract chunk\n            #     resampled_chunk = torchaudio.functional.resample(chunk, orig_freq=orig_sr, new_freq=target_sr)\n            #     resampled_chunks.append(resampled_chunk)\n        \n            # # Concatenate back the processed chunks\n            # # print(\"PROCESSING CHUNKS\")\n            # resampled_audio = torch.cat(resampled_chunks, dim=1)\n            # # print(resampled_audio.shape)\n            # resampled_audio = resampled_audio.mean(dim=0, keepdim=False)\n            # # print(resampled_audio.shape)\n            # # print(resampled_audio.shape)\n            # return resampled_audio\n        # if random_chunk_start_val:\n        random_chunk_start_val = 0\n        \n        return {\n            \"mix_sig\": load_stem_chunk(\"mix\", random_chunk_start_val),\n            \"voc_sig\": load_stem_chunk(\"vocals\",random_chunk_start_val),\n            \"inst_sig\": load_stem_chunk(\"accompaniment\",random_chunk_start_val),\n            \"track_id\": track_info[\"stem_id\"]\n        }\n\n# Define training procedure\nclass Separation(sb.Brain):\n    def compute_forward(self, mix, targets, stage, noise=None):\n        \"\"\"Forward computations from the mixture to the separated signals.\"\"\"\n\n        # Unpack lists and put tensors in the right device\n        # print(\"compute forward\")\n        # print(mix)\n        mix, mix_lens = mix\n        \n        mix, mix_lens = mix.to(self.device), mix_lens.to(self.device)\n        \n\n        # Convert targets to tensor\n        targets = torch.cat(\n            [targets[i][0].unsqueeze(-1) for i in range(self.hparams.num_sources)],\n            dim=-1,\n        ).to(self.device)\n        print(\"compute_forward 1 \")\n        print(targets.size())\n        print(mix.size())\n        \n        # Add speech distortions\n        # if stage == sb.Stage.TRAIN:\n        #     with torch.no_grad():\n        # #         if self.hparams.use_speedperturb:\n        # #             mix, targets = self.add_speed_perturb(targets, mix_lens)\n\n        # #             mix = targets.sum(-1)\n\n        #         if self.hparams.use_wavedrop:\n        #             mix = self.hparams.drop_chunk(mix, mix_lens)\n        #             mix = self.hparams.drop_freq(mix)\n\n        #         if self.hparams.limit_training_signal_len:\n        #             mix, targets = self.cut_signals(mix, targets)\n\n        # Separation\n        mix_w = self.hparams.Encoder(mix)\n        est_mask = self.hparams.MaskNet(mix_w)\n        mix_w = torch.stack([mix_w] * self.hparams.num_sources)\n        sep_h = mix_w * est_mask\n        \n        # Decoding\n        est_source = torch.cat(\n            [\n                self.hparams.Decoder(sep_h[i]).unsqueeze(-1)\n                for i in range(self.hparams.num_sources)\n            ],\n            dim=-1,\n        )\n        print(\"compute forward 2 \")\n        print(est_source.size())\n        print(targets.size())\n\n        # T changed after conv1d in encoder, fix it here\n        T_origin = mix.size(1)\n        T_est = est_source.size(1)\n        if T_origin > T_est:\n            est_source = F.pad(est_source, (0, 0, 0, T_origin - T_est))\n        else:\n            est_source = est_source[:, :T_origin, :]\n\n        # pdb.set_trace()\n        # print(\"compute_forward ended\")\n        \n        return est_source, targets\n\n    def compute_objectives(self, predictions, targets):\n        \"\"\"Computes the sinr loss\"\"\"\n        print(\"compute obj\")\n        print(targets.size())\n        print(predictions.size())\n        return self.hparams.loss(targets, predictions)\n\n    def fit_batch(self, batch):\n        \"\"\"Trains one batch\"\"\"\n        # print(\"INSIDE FIT BATCH\")\n        \n        amp = AMPConfig.from_name(self.precision)\n        should_step = (self.step % self.grad_accumulation_factor) == 0\n        # Unpacking batch list\n        mixture = batch.mix_sig\n        targets = [batch.voc_sig, batch.inst_sig] #mix_sig, voc_sig, inst_sig\n        \n        # time.sleep(1000000) # debugging\n        # with self.no_sync(not should_step):\n        #     if self.use_amp:\n        #         with torch.autocast(\n        #             dtype=amp.dtype, device_type=torch.device(self.device).type\n        #         ):\n        #             predictions, targets = self.compute_forward(\n        #                 mixture, targets, sb.Stage.TRAIN\n        #             )\n        #             print(\"compute forward\")\n        #             loss = self.compute_objectives(predictions, targets)\n\n        #             # hard threshold the easy dataitems\n        #             if self.hparams.threshold_byloss:\n        #                 th = self.hparams.threshold\n        #                 loss = loss[loss > th]\n        #                 if loss.nelement() > 0:\n        #                     loss = loss.mean()\n        #             else:\n        #                 loss = loss.mean()\n\n        #         if (\n        #             loss.nelement() > 0 and loss < self.hparams.loss_upper_lim\n        #         ):  # the fix for computational problems\n        #             self.scaler.scale(loss).backward()\n        #             if self.hparams.clip_grad_norm >= 0:\n        #                 self.scaler.unscale_(self.optimizer)\n        #                 torch.nn.utils.clip_grad_norm_(\n        #                     self.modules.parameters(),\n        #                     self.hparams.clip_grad_norm,\n        #                 )\n        #             self.scaler.step(self.optimizer)\n        #             self.scaler.update()\n        #         else:\n        #             self.nonfinite_count += 1\n        #             logger.info(\n        #                 \"infinite loss or empty loss! it happened {} times so far - skipping this batch\".format(\n        #                     self.nonfinite_count\n        #                 )\n        #             )\n        #             loss.data = torch.tensor(0.0).to(self.device)\n        #     else:\n       \n        \n        predictions, targets = self.compute_forward(\n            mixture, targets, sb.Stage.TRAIN\n        )\n        loss = self.compute_objectives(predictions, targets)\n\n        if self.hparams.threshold_byloss:\n            th = self.hparams.threshold\n            loss = loss[loss > th]\n            if loss.nelement() > 0:\n                loss = loss.mean()\n        else:\n            loss = loss.mean()\n\n        if (\n            loss.nelement() > 0 and loss < self.hparams.loss_upper_lim\n        ):  # the fix for computational problems\n            loss.backward()\n            if self.hparams.clip_grad_norm >= 0:\n                torch.nn.utils.clip_grad_norm_(\n                    self.modules.parameters(),\n                    self.hparams.clip_grad_norm,\n                )\n            self.optimizer.step()\n        else:\n            self.nonfinite_count += 1\n            logger.info(\n                \"infinite loss or empty loss! it happened {} times so far - skipping this batch\".format(\n                    self.nonfinite_count\n                )\n            )\n            loss.data = torch.tensor(0.0).to(self.device)\n        self.optimizer.zero_grad()\n\n        return loss.detach().cpu()\n\n    def evaluate_batch(self, batch, stage):\n        \"\"\"Computations needed for validation/test batches\"\"\"\n        snt_id = batch.track_id\n        mixture = batch.mix_sig\n        targets = [batch.voc_sig, batch.inst_sig]\n        # if self.hparams.num_spks == 3:\n        #     targets.append(batch.s3_sig)\n\n        with torch.no_grad():\n            predictions, targets = self.compute_forward(mixture, targets, stage)\n            loss = self.compute_objectives(predictions, targets)\n\n        # Manage audio file saving\n        if stage == sb.Stage.TEST and self.hparams.save_audio:\n            if hasattr(self.hparams, \"n_audio_to_save\"):\n                if self.hparams.n_audio_to_save > 0:\n                    self.save_audio(snt_id[0], mixture, targets, predictions)\n                    self.hparams.n_audio_to_save += -1\n            else:\n                self.save_audio(snt_id[0], mixture, targets, predictions)\n\n        return loss.mean().detach()\n\n    def on_stage_end(self, stage, stage_loss, epoch):\n        \"\"\"Gets called at the end of a epoch.\"\"\"\n        # Compute/store important stats\n        stage_stats = {\"si-snr\": stage_loss}\n        if stage == sb.Stage.TRAIN:\n            self.train_stats = stage_stats\n\n        # Perform end-of-iteration things, like annealing, logging, etc.\n        if stage == sb.Stage.VALID:\n            # Learning rate annealing\n            if isinstance(\n                self.hparams.lr_scheduler, schedulers.ReduceLROnPlateau\n            ):\n                current_lr, next_lr = self.hparams.lr_scheduler(\n                    [self.optimizer], epoch, stage_loss\n                )\n                schedulers.update_learning_rate(self.optimizer, next_lr)\n            else:\n                # if we do not use the reducelronplateau, we do not change the lr\n                current_lr = self.hparams.optimizer.optim.param_groups[0][\"lr\"]\n\n            self.hparams.train_logger.log_stats(\n                stats_meta={\"epoch\": epoch, \"lr\": current_lr},\n                train_stats=self.train_stats,\n                valid_stats=stage_stats,\n            )\n            self.checkpointer.save_and_keep_only(\n                meta={\"si-snr\": stage_stats[\"si-snr\"]}, min_keys=[\"si-snr\"]\n            )\n        elif stage == sb.Stage.TEST:\n            self.hparams.train_logger.log_stats(\n                stats_meta={\"Epoch loaded\": self.hparams.epoch_counter.current},\n                test_stats=stage_stats,\n            )\n\n    # def add_speed_perturb(self, targets, targ_lens):\n    #     \"\"\"Adds speed perturbation and random_shift to the input signals\"\"\"\n\n    #     min_len = -1\n    #     recombine = False\n\n    #     if self.hparams.use_speedperturb or self.hparams.use_rand_shift:\n    #         # Performing speed change (independently on each source)\n    #         new_targets = []\n    #         recombine = True\n\n    #         for i in range(targets.shape[-1]):\n    #             new_target = self.hparams.speed_perturb(targets[:, :, i])\n    #             new_targets.append(new_target)\n    #             if i == 0:\n    #                 min_len = new_target.shape[-1]\n    #             else:\n    #                 if new_target.shape[-1] < min_len:\n    #                     min_len = new_target.shape[-1]\n\n    #         if self.hparams.use_rand_shift:\n    #             # Performing random_shift (independently on each source)\n    #             recombine = True\n    #             for i in range(targets.shape[-1]):\n    #                 rand_shift = torch.randint(\n    #                     self.hparams.min_shift, self.hparams.max_shift, (1,)\n    #                 )\n    #                 new_targets[i] = new_targets[i].to(self.device)\n    #                 new_targets[i] = torch.roll(\n    #                     new_targets[i], shifts=(rand_shift[0],), dims=1\n    #                 )\n\n    #         # Re-combination\n    #         if recombine:\n    #             if self.hparams.use_speedperturb:\n    #                 targets = torch.zeros(\n    #                     targets.shape[0],\n    #                     min_len,\n    #                     targets.shape[-1],\n    #                     device=targets.device,\n    #                     dtype=torch.float,\n    #                 )\n    #             for i, new_target in enumerate(new_targets):\n    #                 targets[:, :, i] = new_targets[i][:, 0:min_len]\n\n    #     mix = targets.sum(-1)\n    #     return mix, targets\n\n    def cut_signals(self, mixture, targets):\n        \"\"\"This function selects a random segment of a given length within the mixture.\n        The corresponding targets are selected accordingly\"\"\"\n        randstart = torch.randint(\n            0,\n            1 + max(0, mixture.shape[1] - self.hparams.training_signal_len),\n            (1,),\n        ).item()\n        targets = targets[\n            :, randstart : randstart + self.hparams.training_signal_len, :\n        ]\n        mixture = mixture[\n            :, randstart : randstart + self.hparams.training_signal_len\n        ]\n        return mixture, targets\n\n    def reset_layer_recursively(self, layer):\n        \"\"\"Reinitializes the parameters of the neural networks\"\"\"\n        if hasattr(layer, \"reset_parameters\"):\n            layer.reset_parameters()\n        for child_layer in layer.modules():\n            if layer != child_layer:\n                self.reset_layer_recursively(child_layer)\n\n    def save_results(self, test_loader):\n        \"\"\"This script computes the SDR and SI-SNR metrics and saves\n        them into a csv file\"\"\"\n\n        # This package is required for SDR computation\n        from mir_eval.separation import bss_eval_sources\n\n        # Create folders where to store audio\n        save_file = os.path.join(self.hparams.output_folder, \"test_results.csv\")\n\n        # Variable init\n        all_sdrs = []\n        all_sdrs_i = []\n        all_sisnrs = []\n        all_sisnrs_i = []\n        csv_columns = [\"snt_id\", \"sdr\", \"sdr_i\", \"si-snr\", \"si-snr_i\"]\n\n        # test_loader = sb.dataio.dataloader.make_dataloader(\n        #     test_data, **self.hparams.dataloader_opts\n        # )\n\n        def is_silent(source, threshold=1e-6):\n            print(np.max(np.abs(source[0])))\n            print(np.max(np.abs(source[1])))\n            print(\"--------silent-----------\")\n            return np.max(np.abs(source[0])) < threshold or np.max(np.abs(source[1])) < threshold\n\n        with open(save_file, \"w\", newline=\"\", encoding=\"utf-8\") as results_csv:\n            writer = csv.DictWriter(results_csv, fieldnames=csv_columns)\n            writer.writeheader()\n            skip_cnt = 0\n\n            # Loop over all test sentence\n            with tqdm(test_loader, dynamic_ncols=True) as t:\n                for i, batch in enumerate(t):\n                    # Apply Separation\n                    mixture, mix_len = batch.mix_sig\n                    snt_id = batch.track_id\n                    targets = [batch.voc_sig, batch.inst_sig]\n                   \n\n                    with torch.no_grad():\n                        predictions, targets = self.compute_forward(\n                            batch.mix_sig, targets, sb.Stage.TEST\n                        )\n\n                    # Compute SI-SNR\n                    sisnr = self.compute_objectives(predictions, targets)\n\n                    # Compute SI-SNR improvement\n                    mixture_signal = torch.stack(\n                        [mixture] * self.hparams.num_sources, dim=-1\n                    )\n                    mixture_signal = mixture_signal.to(targets.device)\n                    sisnr_baseline = self.compute_objectives(\n                        mixture_signal, targets\n                    )\n                    sisnr_i = sisnr - sisnr_baseline\n                    \n                    # Compute SDR\n                \n                    print(targets[0].t().size())\n                    print(targets[0].t().cpu().numpy())\n\n                    print(predictions[0].t().size())\n                    print(predictions[0].t().detach().cpu().numpy())\n\n                    print(mixture_signal[0].t().size())\n                    print(mixture_signal[0].t().detach().cpu().numpy())\n\n                    if not is_silent(targets[0].t().cpu().numpy()) and not is_silent(predictions[0].t().detach().cpu().numpy()) and not is_silent(mixture_signal[0].t().detach().cpu().numpy()):\n                        \n                    \n                        sdr, _, _, _ = bss_eval_sources(\n                            targets[0].t().cpu().numpy(),\n                            predictions[0].t().detach().cpu().numpy(),\n                            compute_permutation=False\n                        )\n    \n                        sdr_baseline, _, _, _ = bss_eval_sources(\n                            targets[0].t().cpu().numpy(),\n                            mixture_signal[0].t().detach().cpu().numpy(),\n                            compute_permutation=False\n                        )\n    \n                        sdr_i = sdr.mean() - sdr_baseline.mean()\n    \n                        # Saving on a csv file\n                        row = {\n                            \"snt_id\": snt_id[0],\n                            \"sdr\": sdr.mean(),\n                            \"sdr_i\": sdr_i,\n                            \"si-snr\": -sisnr.item(),\n                            \"si-snr_i\": -sisnr_i.item(),\n                        }\n                        writer.writerow(row)\n    \n                        # Metric Accumulation\n                        all_sdrs.append(sdr.mean())\n                        all_sdrs_i.append(sdr_i.mean())\n                        all_sisnrs.append(-sisnr.item())\n                        all_sisnrs_i.append(-sisnr_i.item())\n    \n                    row = {\n                        \"snt_id\": \"avg\",\n                        \"sdr\": np.array(all_sdrs).mean(),\n                        \"sdr_i\": np.array(all_sdrs_i).mean(),\n                        \"si-snr\": np.array(all_sisnrs).mean(),\n                        \"si-snr_i\": np.array(all_sisnrs_i).mean(),\n                    }\n                    writer.writerow(row)\n                else:\n                    skip_cnt += 1\n                    print(f\"Warning: skipping silent target, this has happened {skip_cnt} times\")\n\n        logger.info(\"Mean SISNR is {}\".format(np.array(all_sisnrs).mean()))\n        logger.info(\"Mean SISNRi is {}\".format(np.array(all_sisnrs_i).mean()))\n        logger.info(\"Mean SDR is {}\".format(np.array(all_sdrs).mean()))\n        logger.info(\"Mean SDRi is {}\".format(np.array(all_sdrs_i).mean()))\n\n    def save_audio(self, snt_id, mixture, targets, predictions):\n        \"saves the test audio (mixture, targets, and estimated sources) on disk\"\n\n        # Create output folder\n        save_path = os.path.join(self.hparams.save_folder, \"audio_results\")\n        if not os.path.exists(save_path):\n            os.mkdir(save_path)\n\n        for ns in range(self.hparams.num_sources):\n            # Estimated source\n            signal = predictions[0, :, ns]\n            signal = signal / signal.abs().max()\n            save_file = os.path.join(\n                save_path, \"item{}_source{}hat.wav\".format(snt_id, ns + 1)\n            )\n            torchaudio.save(\n                save_file, signal.unsqueeze(0).cpu(), self.hparams.sample_rate\n            )\n\n            # Original source\n            signal = targets[0, :, ns]\n            signal = signal / signal.abs().max()\n            save_file = os.path.join(\n                save_path, \"item{}_source{}.wav\".format(snt_id, ns + 1)\n            )\n            torchaudio.save(\n                save_file, signal.unsqueeze(0).cpu(), self.hparams.sample_rate\n            )\n\n        # Mixture\n        signal = mixture[0][0, :]\n        signal = signal / signal.abs().max()\n        save_file = os.path.join(save_path, \"item{}_mix.wav\".format(snt_id))\n        torchaudio.save(\n            save_file, signal.unsqueeze(0).cpu(), self.hparams.sample_rate\n        )\n\n\n\n\n# def dataio_prep(hparams):\n#     \"\"\"Creates data processing pipeline\"\"\"\n\n#     # 1. Define datasets\n\n#     # datasets = {}\n#     # data_info = {\n#     #     \"train\": hparams[\"train_annotation\"],\n#     #     \"valid\": hparams[\"valid_annotation\"],\n#     #     \"test\": hparams[\"test_annotation\"],\n#     # }\n\n        \n#     MUS_DB_PATH = hparams[\"db_path\"]\n    \n#     mus = musdb.DB(root=MUS_DB_PATH)\n    \n#     mus_train = musdb.DB(root=MUS_DB_PATH,subsets=\"train\", split=\"train\")\n#     mus_valid = musdb.DB(root=MUS_DB_PATH,subsets=\"train\", split=\"valid\")\n#     mus_test = musdb.DB(root=MUS_DB_PATH,subsets=\"test\")\n\n\n        \n#     def create_json(mus_obj):\n#       json_dict = {}\n#       for i, track in enumerate(mus_obj):\n        \n#         file_name = track.name\n#         file_path = track.path\n#         file_rate = track.rate\n        \n#         json_dict[file_name] = {\n#                   \"track\": track\n#           }\n        \n#         return json_dict\n          \n#     train_obj = create_json(mus_train)\n#     test_obj = create_json(mus_test)\n#     valid_obj = create_json(mus_valid)\n    \n   \n    \n    \n  \n#     def convert_musdb_to_torch(track, target_sr=8000, chunk_size_seconds=1):\n#         \"\"\"\n#         Converts a musdb track to a PyTorch tensor with efficient resampling.\n    \n#         Args:\n#             track: A musdb track object (e.g., `mus_train[0]`).\n#             target_sr (int): The target sampling rate for resampling.\n#             chunk_size_seconds (int): Number of seconds per processing chunk.\n    \n#         Returns:\n#             torch.Tensor: The resampled waveform tensor of shape (num_channels, num_samples).\n#         \"\"\"\n#         # Convert to tensor and move channels first (PyTorch format)\n#         audio_tensor = torch.from_numpy(track.audio).float().permute(1, 0)  # Shape: (num_channels, num_samples)\n        \n#         orig_sr = track.rate  # Original sample rate\n        \n#         chunk_size = orig_sr * chunk_size_seconds  # Convert chunk size to samples\n    \n#         resampled_chunks = []\n    \n#         for i in range(0, audio_tensor.shape[1], chunk_size):\n#             chunk = audio_tensor[:, i:i + chunk_size]  # Extract chunk\n#             resampled_chunk = torchaudio.functional.resample(chunk, orig_freq=orig_sr, new_freq=target_sr)\n#             resampled_chunks.append(resampled_chunk)\n    \n#         # Concatenate back the processed chunks\n#         # print(\"PROCESSING CHUNKS\")\n#         resampled_audio = torch.cat(resampled_chunks, dim=1)\n#         # print(resampled_audio.shape)\n#         resampled_audio = resampled_audio.mean(dim=0, keepdim=False)\n#         print(resampled_audio.shape)\n#         # print(resampled_audio.shape)\n#         return resampled_audio\n    \n    \n#     @sb.utils.data_pipeline.takes(\"track\")\n#     @sb.utils.data_pipeline.provides(\"track_id\",\"mix_sig\", \"voc_sig\", \"inst_sig\")\n#     def audio_pipeline_mix(track):\n#         # mix_sig = torchaudio.functional.resample(torch.from_numpy(track.audio), track.rate, hparams[\"sample_rate\"])\n\n#         # voc_sig = torchaudio.functional.resample(torch.from_numpy(track.targets['vocals'].audio), track.rate, hparams[\"sample_rate\"])\n\n#         # inst_sig = torchaudio.functional.resample(torch.from_numpy(track.targets['accompaniment'].audio), track.rate, hparams[\"sample_rate\"])\n#          #.squeeze(dim=0) \n#         mix_sig = convert_musdb_to_torch(track, hparams[\"sample_rate\"], chunk_size_seconds=1)\n#         voc_sig = convert_musdb_to_torch(track.targets[\"vocals\"], hparams[\"sample_rate\"], chunk_size_seconds=1)\n#         inst_sig = convert_musdb_to_torch(track.targets[\"accompaniment\"], hparams[\"sample_rate\"], chunk_size_seconds=1)\n#         track_id = track.name\n        \n#         return track_id, mix_sig, voc_sig, inst_sig\n\n\n    \n    \n#     train_data = sb.dataio.dataset.DynamicItemDataset(train_obj, dynamic_items=[audio_pipeline_mix], output_keys=[\"track_id\",\"mix_sig\", \"voc_sig\", \"inst_sig\"])\n#     valid_data = sb.dataio.dataset.DynamicItemDataset(valid_obj, dynamic_items=[audio_pipeline_mix], output_keys=[\"track_id\",\"mix_sig\", \"voc_sig\", \"inst_sig\"])\n#     test_data = sb.dataio.dataset.DynamicItemDataset(test_obj, dynamic_items=[audio_pipeline_mix], output_keys=[\"track_id\",\"mix_sig\", \"voc_sig\", \"inst_sig\"])\n#     datasets = [train_data, valid_data, test_data]\n    \n    \n#     return datasets\n    \n    # return\n    # datasets = [train_data, valid_data, test_data]\n\n    # valid_data = sb.dataio.dataset.DynamicItemDataset.from_json(\n    #     json_path=hparams[\"valid_data\"],\n    #     replacements={\"data_root\": hparams[\"data_folder\"]},\n    # )\n\n    # test_data = sb.dataio.dataset.DynamicItemDataset.from_json(\n    #     json_path=hparams[\"test_data\"],\n    #     replacements={\"data_root\": hparams[\"data_folder\"]},\n    # )\n\n    # hparams[\"dataloader_options\"][\"shuffle\"] = False\n    \n\n\n    # @sb.utils.data_pipeline.takes(\"mix_obj\")\n    # @sb.utils.data_pipeline.provides(\"voc\")\n    # def audio_pipeline_vocals(mix_obj):\n    #     voc = torchaudio.functional.resample(mix_obj.targets['vocals'].audio, rate, 16000) #.squeeze(dim=0) \n    #     return voc\n\n    # @sb.utils.data_pipeline.takes(\"mix_obj\")\n    # @sb.utils.data_pipeline.provides(\"inst\")\n    # def audio_pipeline_instrumentals(mix_obj):\n    #     inst = torchaudio.functional.resample(mix_obj.audio, rate, 16000) #.squeeze(dim=0) \n    #     return inst\n\n    # if hparams[\"num_spks\"] == 3:\n\n    #     @sb.utils.data_pipeline.takes(\"s3_wav\")\n    #     @sb.utils.data_pipeline.provides(\"s3_sig\")\n    #     def audio_pipeline_s3(s3_wav):\n    #         s3_sig = sb.dataio.dataio.read_audio(s3_wav)\n    #         return s3_sig\n\n    # sb.dataio.dataset.add_dynamic_item(datasets, audio_pipeline_mix)\n    # sb.dataio.dataset.add_dynamic_item(datasets, audio_pipeline_vocals)\n    # sb.dataio.dataset.add_dynamic_item(datasets, audio_pipeline_instrumentals)\n    # if hparams[\"num_spks\"] == 3:\n    #     sb.dataio.dataset.add_dynamic_item(datasets, audio_pipeline_s3)\n    #     sb.dataio.dataset.set_output_keys(\n    #         datasets, [\"id\", \"mix_sig\", \"s1_sig\", \"s2_sig\", \"s3_sig\"]\n    #     )\n    # else:\n    # sb.dataio.dataset.set_output_keys(\n    #     datasets, [\"id\", \"mix_sig\", \"voc_sig\", \"inst_sig\"]\n    # )\n\n\n\nif __name__ == \"__main__\":\n    # Load hyperparameters file with command-line overrides\n    hparams_file, run_opts, overrides = sb.parse_arguments(sys.argv[1:])\n    with open(hparams_file, encoding=\"utf-8\") as fin:\n        hparams = load_hyperpyyaml(fin, overrides)\n\n    # Initialize ddp (useful only for multi-GPU DDP training)\n    sb.utils.distributed.ddp_init_group(run_opts)\n\n    # Logger info\n    logger = get_logger(__name__)\n\n    # Create experiment directory\n    sb.create_experiment_directory(\n        experiment_directory=hparams[\"output_folder\"],\n        hyperparams_to_save=hparams_file,\n        overrides=overrides,\n    )\n\n    # Update precision to bf16 if the device is CPU and precision is fp16\n    if run_opts.get(\"device\") == \"cpu\" and hparams.get(\"precision\") == \"fp16\":\n        hparams[\"precision\"] = \"bf16\"\n\n    # # Check if wsj0_tr is set with dynamic mixing\n    # if hparams[\"dynamic_mixing\"] and not os.path.exists(\n    #     hparams[\"base_folder_dm\"]\n    # ):\n    #     raise ValueError(\n    #         \"Please, specify a valid base_folder_dm folder when using dynamic mixing\"\n    #     )\n\n    # Data preparation\n    # from prepare_data import prepare_wsjmix  # noqa\n\n    # run_on_main(\n    #     # prepare_wsjmix,\n    #     kwargs={\n    #         \"datapath\": hparams[\"data_folder\"],\n    #         \"savepath\": hparams[\"save_folder\"],\n    #         \"n_spks\": hparams[\"num_spks\"],\n    #         \"skip_prep\": hparams[\"skip_prep\"],\n    #         \"fs\": hparams[\"sample_rate\"],\n    #     },\n    # )\n\n    # Create dataset objects\n    # if hparams[\"dynamic_mixing\"]:\n    #     from dynamic_mixing import dynamic_mix_data_prep\n\n    #     # if the base_folder for dm is not processed, preprocess them\n    #     if \"processed\" not in hparams[\"base_folder_dm\"]:\n    #         # if the processed folder already exists we just use it otherwise we do the preprocessing\n    #         if not os.path.exists(\n    #             os.path.normpath(hparams[\"base_folder_dm\"]) + \"_processed\"\n    #         ):\n    #             from preprocess_dynamic_mixing import resample_folder\n\n    #             print(\"Resampling the base folder\")\n    #             run_on_main(\n    #                 resample_folder,\n    #                 kwargs={\n    #                     \"input_folder\": hparams[\"base_folder_dm\"],\n    #                     \"output_folder\": os.path.normpath(\n    #                         hparams[\"base_folder_dm\"]\n    #                     )\n    #                     + \"_processed\",\n    #                     \"fs\": hparams[\"sample_rate\"],\n    #                     \"regex\": \"**/*.wav\",\n    #                 },\n    #             )\n    #             # adjust the base_folder_dm path\n    #             hparams[\"base_folder_dm\"] = (\n    #                 os.path.normpath(hparams[\"base_folder_dm\"]) + \"_processed\"\n    #             )\n    #         else:\n    #             print(\n    #                 \"Using the existing processed folder on the same directory as base_folder_dm\"\n    #             )\n    #             hparams[\"base_folder_dm\"] = (\n    #                 os.path.normpath(hparams[\"base_folder_dm\"]) + \"_processed\"\n    #             )\n\n    #     # Collecting the hparams for dynamic batching\n    #     dm_hparams = {\n    #         \"train_data\": hparams[\"train_data\"],\n    #         \"data_folder\": hparams[\"data_folder\"],\n    #         \"base_folder_dm\": hparams[\"base_folder_dm\"],\n    #         \"sample_rate\": hparams[\"sample_rate\"],\n    #         \"num_spks\": hparams[\"num_spks\"],\n    #         \"training_signal_len\": hparams[\"training_signal_len\"],\n    #         \"dataloader_opts\": hparams[\"dataloader_opts\"],\n    #     }\n    #     train_data = dynamic_mix_data_prep(dm_hparams)\n    #     _, valid_data, test_data = dataio_prep(hparams)\n    # else:\n    # print(dataio_prep(hparams))\n    # train_data, valid_data, test_data = dataio_prep(hparams)\n    \n    # print(train_data)\n        \n    # # Load pretrained model if pretrained_separator is present in the yaml\n    # if \"pretrained_separator\" in hparams:\n    #     run_on_main(hparams[\"pretrained_separator\"].collect_files)\n    #     hparams[\"pretrained_separator\"].load_collected()\n\n     \n    # print(type(train_data))\n\n    # Brain class initialization\n    separator = Separation(\n        modules=hparams[\"modules\"],\n        opt_class=hparams[\"optimizer\"],\n        hparams=hparams,\n        run_opts=run_opts,\n        checkpointer=hparams[\"checkpointer\"],\n    )\n    # time.sleep(1000000) # debugging\n    # # # re-initialize the parameters if we don't use a pretrained model\n    # # if \"pretrained_separator\" not in hparams:\n    # #     for module in separator.modules.values():\n    # #         separator.reset_layer_recursively(module)\n\n    # Training\n        \n    # Usage with SpeechBrain\n    train_data = LazyMusDBDataset(hparams[\"db_path\"], subset=\"train\", split=\"train\", target_sr=8000, chunk_size=20)\n    valid_data = LazyMusDBDataset(hparams[\"db_path\"], subset=\"train\", split=\"valid\", target_sr=8000, chunk_size=20)\n    test_data = LazyMusDBDataset(hparams[\"db_path\"], subset=\"test\", target_sr=8000, chunk_size=20)\n    \n\n# Create DataLoader\n    train_loader = sb.dataio.dataloader.make_dataloader(\n        train_data,\n        batch_size=1,\n        collate_fn=sb.dataio.batch.PaddedBatch  # Handles variable lengths\n    )\n\n    valid_loader = sb.dataio.dataloader.make_dataloader(\n        valid_data,\n        batch_size=1,\n        collate_fn=sb.dataio.batch.PaddedBatch  # Handles variable lengths\n    )\n\n    test_loader = sb.dataio.dataloader.make_dataloader(\n        test_data,\n        batch_size=1,\n        collate_fn=sb.dataio.batch.PaddedBatch  # Handles variable lengths\n    )\n    # print(\"STARTING FIT\")\n    separator.fit(\n        separator.hparams.epoch_counter,\n        train_loader,\n        valid_loader,\n        train_loader_kwargs=hparams[\"dataloader_opts\"],\n        valid_loader_kwargs=hparams[\"dataloader_opts\"],\n    )\n\n    # # Eval\n    separator.evaluate(test_loader, min_key=\"si-snr\")\n    separator.save_results(test_loader)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-10T01:50:38.676030Z","iopub.execute_input":"2025-04-10T01:50:38.676400Z","iopub.status.idle":"2025-04-10T01:50:38.686847Z","shell.execute_reply.started":"2025-04-10T01:50:38.676366Z","shell.execute_reply":"2025-04-10T01:50:38.686063Z"}},"outputs":[{"name":"stdout","text":"Overwriting train.py\n","output_type":"stream"}],"execution_count":22},{"cell_type":"code","source":"# To start from scratch, you need to remove the output folder.\n# Otherwise, speechbrain starts from the last val checkpoint.\n# !rm -rf ./results/convtasnet/1234\n\n# !python train.py hparams.yaml --data_folder=db_path --device \"cpu\"\n!torchrun --standalone --nproc_per_node=2 train.py hparams.yaml --data_folder=db_path","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-10T01:50:43.572902Z","iopub.execute_input":"2025-04-10T01:50:43.573196Z","iopub.status.idle":"2025-04-10T02:00:37.078368Z","shell.execute_reply.started":"2025-04-10T01:50:43.573175Z","shell.execute_reply":"2025-04-10T02:00:37.077261Z"}},"outputs":[{"name":"stdout","text":"W0410 01:50:45.421000 40045 torch/distributed/run.py:793] \nW0410 01:50:45.421000 40045 torch/distributed/run.py:793] *****************************************\nW0410 01:50:45.421000 40045 torch/distributed/run.py:793] Setting OMP_NUM_THREADS environment variable for each process to be 1 in default, to avoid your system being overloaded, please further tune the variable for optimal performance in your application as needed. \nW0410 01:50:45.421000 40045 torch/distributed/run.py:793] *****************************************\nspeechbrain.utils.quirks - Applied quirks (see `speechbrain.utils.quirks`): [allow_tf32, disable_jit_profiling]\nspeechbrain.utils.quirks - Excluded quirks specified by the `SB_DISABLE_QUIRKS` environment (comma-separated list): []\nspeechbrain.core - Beginning experiment!\nspeechbrain.core - Experiment folder: /kaggle/working/results/convtasnet/1234\nspeechbrain.core - Info: precision arg from hparam file is used\nspeechbrain.core - Info: noprogressbar arg from hparam file is used\nspeechbrain.core - Gradscaler enabled: `True`\nspeechbrain.core - Using training precision: `--precision=fp16`\nspeechbrain.core - Using evaluation precision: `--eval_precision=fp32`\nspeechbrain.core - Separation Model Statistics:\n* Total Number of Trainable Parameters: 6.6M\n* Total Number of Parameters: 6.6M\n* Trainable Parameters represent 100.0000% of the total size.\nspeechbrain.utils.checkpoints - Loading a checkpoint from /kaggle/working/results/convtasnet/1234/save/CKPT+2025-04-10+00-10-13+00\n/usr/local/lib/python3.10/dist-packages/speechbrain/utils/checkpoints.py:200: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.\n  state_dict = torch.load(path, map_location=device)\n/usr/local/lib/python3.10/dist-packages/speechbrain/utils/checkpoints.py:200: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.\n  state_dict = torch.load(path, map_location=device)\n/usr/local/lib/python3.10/dist-packages/speechbrain/nnet/schedulers.py:992: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.\n  data = torch.load(path)\n/usr/local/lib/python3.10/dist-packages/speechbrain/nnet/schedulers.py:992: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.\n  data = torch.load(path)\nspeechbrain.utils.checkpoints - Loading a checkpoint from /kaggle/working/results/convtasnet/1234/save/CKPT+2025-04-10+00-10-13+00\n  0%|                                                    | 0/44 [00:00<?, ?it/s]compute_forward 1 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000])\ncompute_forward 1 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000])\ncompute forward 2 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute forward 2 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\n  2%|█                                           | 1/44 [00:05<04:14,  5.91s/it]compute_forward 1 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000])\ncompute_forward 1 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000])\ncompute forward 2 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute forward 2 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\n  5%|██                                          | 2/44 [00:11<03:56,  5.62s/it]compute_forward 1 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000])\ncompute_forward 1 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000])\ncompute forward 2 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute forward 2 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\n  7%|███                                         | 3/44 [00:17<03:53,  5.70s/it]compute_forward 1 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000])\ncompute_forward 1 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000])\ncompute forward 2 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute forward 2 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\n  9%|████                                        | 4/44 [00:25<04:27,  6.68s/it]compute_forward 1 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000])\ncompute forward 2 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute_forward 1 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000])\ncompute forward 2 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\n 11%|█████                                       | 5/44 [00:31<04:10,  6.43s/it]compute_forward 1 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000])\ncompute_forward 1 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000])\ncompute forward 2 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute forward 2 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\n 14%|██████                                      | 6/44 [00:37<03:55,  6.19s/it]compute_forward 1 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000])\ncompute_forward 1 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000])\ncompute forward 2 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute forward 2 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\n 16%|███████                                     | 7/44 [00:43<03:57,  6.41s/it]compute_forward 1 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000])\ncompute_forward 1 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000])\ncompute forward 2 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute forward 2 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\n 18%|████████                                    | 8/44 [00:50<03:49,  6.37s/it]compute_forward 1 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000])\ncompute_forward 1 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000])\ncompute forward 2 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute forward 2 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\n 20%|█████████                                   | 9/44 [00:56<03:43,  6.37s/it]compute_forward 1 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000])\ncompute_forward 1 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000])\ncompute forward 2 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute forward 2 \ncompute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])torch.Size([1, 160000, 2])\n\ncompute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\n 23%|█████████▊                                 | 10/44 [01:01<03:24,  6.03s/it]compute_forward 1 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000])\ncompute forward 2 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute_forward 1 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000])\ncompute forward 2 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\n 25%|██████████▊                                | 11/44 [01:06<03:08,  5.71s/it]compute_forward 1 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000])\ncompute_forward 1 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000])\ncompute forward 2 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute forward 2 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\n 27%|███████████▋                               | 12/44 [01:13<03:12,  6.01s/it]compute_forward 1 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000])\ncompute_forward 1 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000])\ncompute forward 2 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute forward 2 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\n 30%|████████████▋                              | 13/44 [01:23<03:40,  7.11s/it]compute_forward 1 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000])\ncompute_forward 1 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000])\ncompute forward 2 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute forward 2 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\n 32%|█████████████▋                             | 14/44 [01:30<03:40,  7.33s/it]compute_forward 1 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000])\ncompute forward 2 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute_forward 1 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000])\ncompute forward 2 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\n 34%|██████████████▋                            | 15/44 [01:35<03:06,  6.42s/it]compute_forward 1 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000])\ncompute forward 2 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute_forward 1 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000])\ncompute forward 2 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\n 36%|███████████████▋                           | 16/44 [01:42<03:03,  6.56s/it]compute_forward 1 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000])\ncompute forward 2 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute_forward 1 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000])\ncompute forward 2 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\n 39%|████████████████▌                          | 17/44 [01:47<02:48,  6.26s/it]compute_forward 1 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000])\ncompute forward 2 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute_forward 1 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000])\ncompute forward 2 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\n 41%|█████████████████▌                         | 18/44 [01:54<02:43,  6.30s/it]compute_forward 1 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000])\ncompute forward 2 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute_forward 1 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000])\ncompute forward 2 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\n 43%|██████████████████▌                        | 19/44 [01:59<02:29,  5.96s/it]compute_forward 1 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000])\ncompute forward 2 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute_forward 1 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000])\ncompute forward 2 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\n 45%|███████████████████▌                       | 20/44 [02:05<02:24,  6.04s/it]compute_forward 1 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000])\ncompute forward 2 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute_forward 1 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000])\ncompute forward 2 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\n 48%|████████████████████▌                      | 21/44 [02:12<02:23,  6.22s/it]compute_forward 1 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000])\ncompute_forward 1 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000])\ncompute forward 2 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute forward 2 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\n 50%|█████████████████████▌                     | 22/44 [02:20<02:27,  6.73s/it]compute_forward 1 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000])\ncompute_forward 1 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000])\ncompute forward 2 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute forward 2 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\n 52%|██████████████████████▍                    | 23/44 [02:24<02:06,  6.04s/it]compute_forward 1 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000])\ncompute forward 2 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute_forward 1 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000])\ncompute forward 2 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\n 55%|███████████████████████▍                   | 24/44 [02:27<01:42,  5.10s/it]compute_forward 1 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000])\ncompute forward 2 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute_forward 1 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000])\ncompute forward 2 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\n 57%|████████████████████████▍                  | 25/44 [02:33<01:40,  5.32s/it]compute_forward 1 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000])\ncompute forward 2 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute_forward 1 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000])\ncompute forward 2 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\n 59%|█████████████████████████▍                 | 26/44 [02:38<01:37,  5.42s/it]compute_forward 1 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000])\ncompute forward 2 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute_forward 1 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000])\ncompute forward 2 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\n 61%|██████████████████████████▍                | 27/44 [02:46<01:41,  5.98s/it]compute_forward 1 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000])\ncompute forward 2 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute_forward 1 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000])\ncompute forward 2 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\n 64%|███████████████████████████▎               | 28/44 [02:53<01:40,  6.26s/it]compute_forward 1 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000])\ncompute forward 2 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute_forward 1 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000])\ncompute forward 2 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\n 66%|████████████████████████████▎              | 29/44 [02:59<01:33,  6.22s/it]compute_forward 1 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000])\ncompute forward 2 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute_forward 1 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000])\ncompute forward 2 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\n 68%|█████████████████████████████▎             | 30/44 [03:05<01:26,  6.21s/it]compute_forward 1 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000])\ncompute forward 2 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute_forward 1 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000])\ncompute forward 2 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\n 70%|██████████████████████████████▎            | 31/44 [03:10<01:15,  5.83s/it]compute_forward 1 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000])\ncompute forward 2 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute_forward 1 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000])\ncompute forward 2 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\n 73%|███████████████████████████████▎           | 32/44 [03:18<01:19,  6.66s/it]compute_forward 1 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000])\ncompute_forward 1 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000])\ncompute forward 2 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute forward 2 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\n 75%|████████████████████████████████▎          | 33/44 [03:25<01:11,  6.54s/it]compute_forward 1 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000])compute_forward 1 \n\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000])\ncompute forward 2 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute forward 2 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\n 77%|█████████████████████████████████▏         | 34/44 [03:32<01:07,  6.76s/it]compute_forward 1 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000])\ncompute forward 2 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute_forward 1 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000])\ncompute forward 2 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\n 80%|██████████████████████████████████▏        | 35/44 [03:40<01:04,  7.13s/it]compute_forward 1 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000])\ncompute forward 2 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute_forward 1 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000])\ncompute forward 2 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\n 82%|███████████████████████████████████▏       | 36/44 [03:46<00:54,  6.80s/it]compute_forward 1 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000])\ncompute forward 2 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute_forward 1 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000])\ncompute forward 2 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\n 84%|████████████████████████████████████▏      | 37/44 [03:52<00:46,  6.60s/it]compute_forward 1 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000])\ncompute forward 2 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute_forward 1 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000])\ncompute forward 2 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\n 86%|█████████████████████████████████████▏     | 38/44 [03:58<00:38,  6.47s/it]compute_forward 1 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000])\ncompute forward 2 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute_forward 1 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000])\ncompute forward 2 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\n 89%|██████████████████████████████████████     | 39/44 [04:06<00:33,  6.80s/it]compute_forward 1 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000])\ncompute forward 2 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute_forward 1 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000])\ncompute forward 2 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\n 91%|███████████████████████████████████████    | 40/44 [04:12<00:26,  6.73s/it]compute_forward 1 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000])\ncompute forward 2 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute_forward 1 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000])\ncompute forward 2 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\n 93%|████████████████████████████████████████   | 41/44 [04:17<00:18,  6.06s/it]compute_forward 1 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000])\ncompute forward 2 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute_forward 1 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000])\ncompute forward 2 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\n 95%|█████████████████████████████████████████  | 42/44 [04:23<00:11,  5.99s/it]compute_forward 1 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000])\ncompute forward 2 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute_forward 1 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000])\ncompute forward 2 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\n 98%|██████████████████████████████████████████ | 43/44 [04:28<00:05,  5.76s/it]compute_forward 1 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000])\ncompute forward 2 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute_forward 1 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000])\ncompute forward 2 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\n100%|███████████████████████████████████████████| 44/44 [04:34<00:00,  6.24s/it]\nspeechbrain.utils.train_logger - Epoch loaded: 3 - test si-snr: 14.76\n  0%|                                                    | 0/44 [00:00<?, ?it/s]compute_forward 1 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000])\ncompute forward 2 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute_forward 1 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000])\ncompute forward 2 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ntorch.Size([2, 160000])\n[[-8.0198779e-06  2.4195579e-06 -4.6607211e-06 ...  1.5578924e-03\n   1.9172877e-02  2.8106589e-02]\n [-7.9498699e-29 -7.9498699e-29 -7.9498699e-29 ... -6.0019186e-03\n  -1.0100173e-02 -1.1853878e-02]]\ntorch.Size([2, 160000])\n[[ 2.8278180e-05 -1.5463493e-05  2.8880226e-05 ...  1.2824742e-01\n   1.8396575e-02 -1.7596847e-01]\n [ 4.5270203e-06 -5.5865198e-06  9.9050430e-06 ...  1.3400827e-01\n  -3.3423550e-02 -1.6988644e-01]]\ntorch.Size([2, 160000])\n[[-1.07997867e-05 -1.74200568e-06 -1.83107841e-06 ... -5.75811323e-03\n   7.56858429e-03  1.45825455e-02]\n [-1.07997867e-05 -1.74200568e-06 -1.83107841e-06 ... -5.75811323e-03\n   7.56858429e-03  1.45825455e-02]]\n0.1656709\n0.4408738\n--------silent-----------\n12.664779\n5.2033825\n--------silent-----------\n0.43991986\n0.43991986\n--------silent-----------\n/kaggle/working/train.py:499: FutureWarning: mir_eval.separation.bss_eval_sources\n\tDeprecated as of mir_eval version 0.8.\n\tIt will be removed in mir_eval version 0.9.\n  sdr, _, _, _ = bss_eval_sources(\ncompute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ntorch.Size([2, 160000])\n[[-8.0198779e-06  2.4195579e-06 -4.6607211e-06 ...  1.5578924e-03\n   1.9172877e-02  2.8106589e-02]\n [-7.9498699e-29 -7.9498699e-29 -7.9498699e-29 ... -6.0019186e-03\n  -1.0100173e-02 -1.1853878e-02]]\ntorch.Size([2, 160000])\n[[ 2.8278180e-05 -1.5463493e-05  2.8880226e-05 ...  1.2824742e-01\n   1.8396575e-02 -1.7596847e-01]\n [ 4.5270203e-06 -5.5865198e-06  9.9050430e-06 ...  1.3400827e-01\n  -3.3423550e-02 -1.6988644e-01]]\ntorch.Size([2, 160000])\n[[-1.07997867e-05 -1.74200568e-06 -1.83107841e-06 ... -5.75811323e-03\n   7.56858429e-03  1.45825455e-02]\n [-1.07997867e-05 -1.74200568e-06 -1.83107841e-06 ... -5.75811323e-03\n   7.56858429e-03  1.45825455e-02]]\n0.1656709\n0.4408738\n--------silent-----------\n12.664779\n5.2033825\n--------silent-----------\n0.43991986\n0.43991986\n--------silent-----------\n/kaggle/working/train.py:499: FutureWarning: mir_eval.separation.bss_eval_sources\n\tDeprecated as of mir_eval version 0.8.\n\tIt will be removed in mir_eval version 0.9.\n  sdr, _, _, _ = bss_eval_sources(\n/kaggle/working/train.py:505: FutureWarning: mir_eval.separation.bss_eval_sources\n\tDeprecated as of mir_eval version 0.8.\n\tIt will be removed in mir_eval version 0.9.\n  sdr_baseline, _, _, _ = bss_eval_sources(\n/kaggle/working/train.py:505: FutureWarning: mir_eval.separation.bss_eval_sources\n\tDeprecated as of mir_eval version 0.8.\n\tIt will be removed in mir_eval version 0.9.\n  sdr_baseline, _, _, _ = bss_eval_sources(\n  2%|█                                           | 1/44 [00:06<04:20,  6.07s/it]compute_forward 1 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000])\ncompute forward 2 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute_forward 1 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000])\ncompute forward 2 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ntorch.Size([2, 160000])\n[[ 0.          0.          0.         ...  0.          0.\n   0.        ]\n [ 0.          0.          0.         ... -0.04726996 -0.03476522\n  -0.01246812]]\ntorch.Size([2, 160000])\n[[0.         0.         0.         ... 0.7263161  0.17818597 0.34014782]\n [0.         0.         0.         ... 0.32524177 0.0195444  0.10502134]]\ntorch.Size([2, 160000])\n[[ 0.          0.          0.         ... -0.04858763 -0.0355577\n  -0.01583551]\n [ 0.          0.          0.         ... -0.04858763 -0.0355577\n  -0.01583551]]\n0.5584993\n0.4426754\n--------silent-----------\n11.342043\n9.753998\n--------silent-----------\n0.60437214\n0.60437214\n--------silent-----------\n/kaggle/working/train.py:499: FutureWarning: mir_eval.separation.bss_eval_sources\n\tDeprecated as of mir_eval version 0.8.\n\tIt will be removed in mir_eval version 0.9.\n  sdr, _, _, _ = bss_eval_sources(\ncompute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ntorch.Size([2, 160000])\n[[ 0.          0.          0.         ...  0.          0.\n   0.        ]\n [ 0.          0.          0.         ... -0.04726996 -0.03476522\n  -0.01246812]]\ntorch.Size([2, 160000])\n[[0.         0.         0.         ... 0.7263161  0.17818597 0.34014782]\n [0.         0.         0.         ... 0.32524177 0.0195444  0.10502134]]\ntorch.Size([2, 160000])\n[[ 0.          0.          0.         ... -0.04858763 -0.0355577\n  -0.01583551]\n [ 0.          0.          0.         ... -0.04858763 -0.0355577\n  -0.01583551]]\n0.5584993\n0.4426754\n--------silent-----------\n11.342043\n9.753998\n--------silent-----------\n0.60437214\n0.60437214\n--------silent-----------\n/kaggle/working/train.py:499: FutureWarning: mir_eval.separation.bss_eval_sources\n\tDeprecated as of mir_eval version 0.8.\n\tIt will be removed in mir_eval version 0.9.\n  sdr, _, _, _ = bss_eval_sources(\n/kaggle/working/train.py:505: FutureWarning: mir_eval.separation.bss_eval_sources\n\tDeprecated as of mir_eval version 0.8.\n\tIt will be removed in mir_eval version 0.9.\n  sdr_baseline, _, _, _ = bss_eval_sources(\n/kaggle/working/train.py:505: FutureWarning: mir_eval.separation.bss_eval_sources\n\tDeprecated as of mir_eval version 0.8.\n\tIt will be removed in mir_eval version 0.9.\n  sdr_baseline, _, _, _ = bss_eval_sources(\n  5%|██                                          | 2/44 [00:12<04:18,  6.15s/it]compute_forward 1 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000])\ncompute forward 2 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute_forward 1 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000])\ncompute forward 2 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ntorch.Size([2, 160000])\n[[ 0.          0.          0.         ... -0.18902932 -0.19175762\n  -0.21047188]\n [ 0.          0.          0.         ...  0.00554273 -0.00303634\n  -0.00760632]]\ntorch.Size([2, 160000])\n[[0.        0.        0.        ... 1.6351068 1.5905874 2.1970925]\n [0.        0.        0.        ... 0.6080389 1.2500173 0.1976156]]\ntorch.Size([2, 160000])\n[[ 0.          0.          0.         ... -0.18419644 -0.19534174\n  -0.21913277]\n [ 0.          0.          0.         ... -0.18419644 -0.19534174\n  -0.21913277]]\n0.33490187\n0.7007611\n--------silent-----------\n19.174837\n8.215176\n--------silent-----------\n0.73478055\n0.73478055\n--------silent-----------\n/kaggle/working/train.py:499: FutureWarning: mir_eval.separation.bss_eval_sources\n\tDeprecated as of mir_eval version 0.8.\n\tIt will be removed in mir_eval version 0.9.\n  sdr, _, _, _ = bss_eval_sources(\ncompute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ntorch.Size([2, 160000])\n[[ 0.          0.          0.         ... -0.18902932 -0.19175762\n  -0.21047188]\n [ 0.          0.          0.         ...  0.00554273 -0.00303634\n  -0.00760632]]\ntorch.Size([2, 160000])\n[[0.        0.        0.        ... 1.6351068 1.5905874 2.1970925]\n [0.        0.        0.        ... 0.6080389 1.2500173 0.1976156]]\ntorch.Size([2, 160000])\n[[ 0.          0.          0.         ... -0.18419644 -0.19534174\n  -0.21913277]\n [ 0.          0.          0.         ... -0.18419644 -0.19534174\n  -0.21913277]]\n0.33490187\n0.7007611\n--------silent-----------\n19.174837\n8.215176\n--------silent-----------\n0.73478055\n0.73478055\n--------silent-----------\n/kaggle/working/train.py:499: FutureWarning: mir_eval.separation.bss_eval_sources\n\tDeprecated as of mir_eval version 0.8.\n\tIt will be removed in mir_eval version 0.9.\n  sdr, _, _, _ = bss_eval_sources(\n/kaggle/working/train.py:505: FutureWarning: mir_eval.separation.bss_eval_sources\n\tDeprecated as of mir_eval version 0.8.\n\tIt will be removed in mir_eval version 0.9.\n  sdr_baseline, _, _, _ = bss_eval_sources(\n/kaggle/working/train.py:505: FutureWarning: mir_eval.separation.bss_eval_sources\n\tDeprecated as of mir_eval version 0.8.\n\tIt will be removed in mir_eval version 0.9.\n  sdr_baseline, _, _, _ = bss_eval_sources(\n  7%|███                                         | 3/44 [00:18<04:15,  6.23s/it]compute_forward 1 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000])\ncompute forward 2 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute_forward 1 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000])\ncompute forward 2 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ntorch.Size([2, 160000])\n[[ 1.8006269e-05  3.2991695e-05  2.9446981e-05 ...  3.0981784e-05\n   2.9488730e-05  3.2939977e-05]\n [ 3.3597258e-05  6.5241969e-05  7.0849128e-05 ... -2.8281920e-02\n  -2.6908357e-02 -2.7493391e-02]]\ntorch.Size([2, 160000])\n[[-2.3539728e-04 -2.7607323e-04 -1.0967254e-04 ...  5.6963670e-01\n   4.2080432e-02  3.0015832e-01]\n [ 6.9040303e-05 -1.4874860e-04  5.4947381e-05 ...  6.5775536e-02\n  -1.0865510e-02 -8.3668441e-02]]\ntorch.Size([2, 160000])\n[[ 3.9133974e-05  1.0854569e-04  1.0407732e-04 ... -2.8033014e-02\n  -2.6630862e-02 -2.7340224e-02]\n [ 3.9133974e-05  1.0854569e-04  1.0407732e-04 ... -2.8033014e-02\n  -2.6630862e-02 -2.7340224e-02]]\n3.2991695e-05\n0.6830164\n--------silent-----------\n19.74053\n6.6276245\n--------silent-----------\n0.68316495\n0.68316495\n--------silent-----------\n/kaggle/working/train.py:499: FutureWarning: mir_eval.separation.bss_eval_sources\n\tDeprecated as of mir_eval version 0.8.\n\tIt will be removed in mir_eval version 0.9.\n  sdr, _, _, _ = bss_eval_sources(\ncompute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ntorch.Size([2, 160000])\n[[ 1.8006269e-05  3.2991695e-05  2.9446981e-05 ...  3.0981784e-05\n   2.9488730e-05  3.2939977e-05]\n [ 3.3597258e-05  6.5241969e-05  7.0849128e-05 ... -2.8281920e-02\n  -2.6908357e-02 -2.7493391e-02]]\ntorch.Size([2, 160000])\n[[-2.3539728e-04 -2.7607323e-04 -1.0967254e-04 ...  5.6963670e-01\n   4.2080432e-02  3.0015832e-01]\n [ 6.9040303e-05 -1.4874860e-04  5.4947381e-05 ...  6.5775536e-02\n  -1.0865510e-02 -8.3668441e-02]]\ntorch.Size([2, 160000])\n[[ 3.9133974e-05  1.0854569e-04  1.0407732e-04 ... -2.8033014e-02\n  -2.6630862e-02 -2.7340224e-02]\n [ 3.9133974e-05  1.0854569e-04  1.0407732e-04 ... -2.8033014e-02\n  -2.6630862e-02 -2.7340224e-02]]\n3.2991695e-05\n0.6830164\n--------silent-----------\n19.74053\n6.6276245\n--------silent-----------\n0.68316495\n0.68316495\n--------silent-----------\n/kaggle/working/train.py:499: FutureWarning: mir_eval.separation.bss_eval_sources\n\tDeprecated as of mir_eval version 0.8.\n\tIt will be removed in mir_eval version 0.9.\n  sdr, _, _, _ = bss_eval_sources(\n/kaggle/working/train.py:505: FutureWarning: mir_eval.separation.bss_eval_sources\n\tDeprecated as of mir_eval version 0.8.\n\tIt will be removed in mir_eval version 0.9.\n  sdr_baseline, _, _, _ = bss_eval_sources(\n/kaggle/working/train.py:505: FutureWarning: mir_eval.separation.bss_eval_sources\n\tDeprecated as of mir_eval version 0.8.\n\tIt will be removed in mir_eval version 0.9.\n  sdr_baseline, _, _, _ = bss_eval_sources(\n  9%|████                                        | 4/44 [00:27<04:45,  7.13s/it]compute_forward 1 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000])\ncompute forward 2 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ntorch.Size([2, 160000])\n[[ 0.00000000e+00  0.00000000e+00  0.00000000e+00 ...  6.19635684e-05\n   5.89774609e-05  6.58799545e-05]\n [-1.09061683e-02 -1.22240605e-02  7.00186100e-03 ...  7.23961815e-02\n   9.79449898e-02  1.01133674e-01]]\ntorch.Size([2, 160000])\n[[ 0.03923627 -0.06654889  0.00953613 ... -1.0577079  -1.2356306\n  -0.8444563 ]\n [ 0.01292751 -0.01419407  0.01336289 ... -0.18257718 -0.18081582\n  -0.16969414]]\ntorch.Size([2, 160000])\n[[-0.01090617 -0.01222406  0.00700186 ...  0.07282209  0.09596568\n   0.10070783]\n [-0.01090617 -0.01222406  0.00700186 ...  0.07282209  0.09596568\n   0.10070783]]\n6.5879954e-05\n0.5122731\n--------silent-----------\n13.585799\n5.3968987\n--------silent-----------\n0.5092027\n0.5092027\n--------silent-----------\n/kaggle/working/train.py:499: FutureWarning: mir_eval.separation.bss_eval_sources\n\tDeprecated as of mir_eval version 0.8.\n\tIt will be removed in mir_eval version 0.9.\n  sdr, _, _, _ = bss_eval_sources(\ncompute_forward 1 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000])\ncompute forward 2 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\n/kaggle/working/train.py:505: FutureWarning: mir_eval.separation.bss_eval_sources\n\tDeprecated as of mir_eval version 0.8.\n\tIt will be removed in mir_eval version 0.9.\n  sdr_baseline, _, _, _ = bss_eval_sources(\ncompute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ntorch.Size([2, 160000])\n[[ 0.00000000e+00  0.00000000e+00  0.00000000e+00 ...  6.19635684e-05\n   5.89774609e-05  6.58799545e-05]\n [-1.09061683e-02 -1.22240605e-02  7.00186100e-03 ...  7.23961815e-02\n   9.79449898e-02  1.01133674e-01]]\ntorch.Size([2, 160000])\n[[ 0.03923627 -0.06654889  0.00953613 ... -1.0577079  -1.2356306\n  -0.8444563 ]\n [ 0.01292751 -0.01419407  0.01336289 ... -0.18257718 -0.18081582\n  -0.16969414]]\ntorch.Size([2, 160000])\n[[-0.01090617 -0.01222406  0.00700186 ...  0.07282209  0.09596568\n   0.10070783]\n [-0.01090617 -0.01222406  0.00700186 ...  0.07282209  0.09596568\n   0.10070783]]\n6.5879954e-05\n0.5122731\n--------silent-----------\n13.585799\n5.3968987\n--------silent-----------\n0.5092027\n0.5092027\n--------silent-----------\n/kaggle/working/train.py:499: FutureWarning: mir_eval.separation.bss_eval_sources\n\tDeprecated as of mir_eval version 0.8.\n\tIt will be removed in mir_eval version 0.9.\n  sdr, _, _, _ = bss_eval_sources(\n 11%|█████                                       | 5/44 [00:32<04:20,  6.69s/it]/kaggle/working/train.py:505: FutureWarning: mir_eval.separation.bss_eval_sources\n\tDeprecated as of mir_eval version 0.8.\n\tIt will be removed in mir_eval version 0.9.\n  sdr_baseline, _, _, _ = bss_eval_sources(\n 11%|█████                                       | 5/44 [00:33<04:26,  6.83s/it]compute_forward 1 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000])\ncompute forward 2 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ntorch.Size([2, 160000])\n[[ 0.0000000e+00  0.0000000e+00  0.0000000e+00 ...  0.0000000e+00\n   0.0000000e+00  0.0000000e+00]\n [ 3.0845512e-26  3.0845512e-26  3.0845512e-26 ... -6.3848287e-02\n  -6.6771090e-02 -8.5238926e-02]]\ntorch.Size([2, 160000])\n[[ 3.1386489e-07 -4.1330331e-06  4.0577729e-06 ...  1.3962439e+00\n   2.3401206e-02  8.1551671e-01]\n [ 2.7332931e-06 -3.7062225e-06 -3.8391104e-07 ...  2.5316548e-01\n   1.7455162e-02 -7.5940959e-02]]\ntorch.Size([2, 160000])\n[[ 3.0845512e-26  3.0845512e-26  3.0845512e-26 ... -6.4274825e-02\n  -6.6588685e-02 -8.3654493e-02]\n [ 3.0845512e-26  3.0845512e-26  3.0845512e-26 ... -6.4274825e-02\n  -6.6588685e-02 -8.3654493e-02]]\n0.0\n0.7170307\n--------silent-----------\n 14%|██████                                      | 6/44 [00:38<03:57,  6.26s/it]compute_forward 1 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000])\ncompute forward 2 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ntorch.Size([2, 160000])\n[[ 0.0000000e+00  0.0000000e+00  0.0000000e+00 ...  0.0000000e+00\n   0.0000000e+00  0.0000000e+00]\n [ 3.0845512e-26  3.0845512e-26  3.0845512e-26 ... -6.3848287e-02\n  -6.6771090e-02 -8.5238926e-02]]\ntorch.Size([2, 160000])\n[[ 3.1386489e-07 -4.1330331e-06  4.0577729e-06 ...  1.3962439e+00\n   2.3401206e-02  8.1551671e-01]\n [ 2.7332931e-06 -3.7062225e-06 -3.8391104e-07 ...  2.5316548e-01\n   1.7455162e-02 -7.5940959e-02]]\ntorch.Size([2, 160000])\n[[ 3.0845512e-26  3.0845512e-26  3.0845512e-26 ... -6.4274825e-02\n  -6.6588685e-02 -8.3654493e-02]\n [ 3.0845512e-26  3.0845512e-26  3.0845512e-26 ... -6.4274825e-02\n  -6.6588685e-02 -8.3654493e-02]]\n0.0\n0.7170307\n--------silent-----------\n 14%|██████                                      | 6/44 [00:38<04:01,  6.35s/it]compute_forward 1 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000])\ncompute forward 2 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ntorch.Size([2, 160000])\n[[ 0.0000000e+00  0.0000000e+00  0.0000000e+00 ...  0.0000000e+00\n   0.0000000e+00  0.0000000e+00]\n [ 1.2435941e-06 -1.0967504e-05 -9.7063548e-06 ... -2.9926430e-02\n  -2.6018631e-02 -1.8380156e-02]]\ntorch.Size([2, 160000])\n[[-4.0624377e-06 -1.2122695e-05  2.2942816e-06 ...  1.0037866e+00\n  -1.9228652e-01  4.6971872e-01]\n [ 1.2482957e-05  7.4501185e-07  1.6616532e-05 ... -2.3207994e-01\n  -2.1252441e-01 -1.6122356e-01]]\ntorch.Size([2, 160000])\n[[ 1.2435941e-06 -1.0967504e-05 -9.7063548e-06 ... -2.9678913e-02\n  -2.6268102e-02 -1.7985009e-02]\n [ 1.2435941e-06 -1.0967504e-05 -9.7063548e-06 ... -2.9678913e-02\n  -2.6268102e-02 -1.7985009e-02]]\n0.0\n0.65432215\n--------silent-----------\n 16%|███████                                     | 7/44 [00:45<03:59,  6.48s/it]compute_forward 1 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000])\ncompute forward 2 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ntorch.Size([2, 160000])\n[[ 0.0000000e+00  0.0000000e+00  0.0000000e+00 ...  0.0000000e+00\n   0.0000000e+00  0.0000000e+00]\n [ 1.2435941e-06 -1.0967504e-05 -9.7063548e-06 ... -2.9926430e-02\n  -2.6018631e-02 -1.8380156e-02]]\ntorch.Size([2, 160000])\n[[-4.0624377e-06 -1.2122695e-05  2.2942816e-06 ...  1.0037866e+00\n  -1.9228652e-01  4.6971872e-01]\n [ 1.2482957e-05  7.4501185e-07  1.6616532e-05 ... -2.3207994e-01\n  -2.1252441e-01 -1.6122356e-01]]\ntorch.Size([2, 160000])\n[[ 1.2435941e-06 -1.0967504e-05 -9.7063548e-06 ... -2.9678913e-02\n  -2.6268102e-02 -1.7985009e-02]\n [ 1.2435941e-06 -1.0967504e-05 -9.7063548e-06 ... -2.9678913e-02\n  -2.6268102e-02 -1.7985009e-02]]\n0.0\n0.65432215\n--------silent-----------\n 16%|███████                                     | 7/44 [00:45<04:01,  6.52s/it]compute_forward 1 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000])\ncompute forward 2 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ntorch.Size([2, 160000])\n[[ 1.5739064e-06  3.4782174e-06 -1.5731703e-05 ...  4.3104056e-04\n   1.4105651e-03 -1.8455420e-04]\n [-1.3967871e-05 -1.6107275e-05 -1.7730827e-05 ...  6.4881360e-03\n   6.8415846e-03  5.9441766e-03]]\ntorch.Size([2, 160000])\n[[ 2.12432005e-05 -2.41834041e-05  4.96203211e-05 ... -4.41403165e-02\n  -1.06211685e-01 -4.96948063e-02]\n [ 6.36911409e-06 -1.06630760e-05  9.74221439e-06 ... -4.15061824e-02\n  -8.57108012e-02 -3.02056149e-02]]\ntorch.Size([2, 160000])\n[[ 3.10884025e-06  4.24332029e-07 -1.02631875e-05 ...  7.19597563e-03\n   8.43624491e-03  5.85322827e-03]\n [ 3.10884025e-06  4.24332029e-07 -1.02631875e-05 ...  7.19597563e-03\n   8.43624491e-03  5.85322827e-03]]\n0.1079493\n0.06865344\n--------silent-----------\n2.464027\n3.1654468\n--------silent-----------\n0.13245922\n0.13245922\n--------silent-----------\n/kaggle/working/train.py:499: FutureWarning: mir_eval.separation.bss_eval_sources\n\tDeprecated as of mir_eval version 0.8.\n\tIt will be removed in mir_eval version 0.9.\n  sdr, _, _, _ = bss_eval_sources(\ncompute_forward 1 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000])\ncompute forward 2 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\n/kaggle/working/train.py:505: FutureWarning: mir_eval.separation.bss_eval_sources\n\tDeprecated as of mir_eval version 0.8.\n\tIt will be removed in mir_eval version 0.9.\n  sdr_baseline, _, _, _ = bss_eval_sources(\ncompute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ntorch.Size([2, 160000])\n[[ 1.5739064e-06  3.4782174e-06 -1.5731703e-05 ...  4.3104056e-04\n   1.4105651e-03 -1.8455420e-04]\n [-1.3967871e-05 -1.6107275e-05 -1.7730827e-05 ...  6.4881360e-03\n   6.8415846e-03  5.9441766e-03]]\ntorch.Size([2, 160000])\n[[ 2.12432005e-05 -2.41834041e-05  4.96203211e-05 ... -4.41403165e-02\n  -1.06211685e-01 -4.96948063e-02]\n [ 6.36911409e-06 -1.06630760e-05  9.74221439e-06 ... -4.15061824e-02\n  -8.57108012e-02 -3.02056149e-02]]\ntorch.Size([2, 160000])\n[[ 3.10884025e-06  4.24332029e-07 -1.02631875e-05 ...  7.19597563e-03\n   8.43624491e-03  5.85322827e-03]\n [ 3.10884025e-06  4.24332029e-07 -1.02631875e-05 ...  7.19597563e-03\n   8.43624491e-03  5.85322827e-03]]\n0.1079493\n0.06865344\n--------silent-----------\n2.464027\n3.1654468\n--------silent-----------\n0.13245922\n0.13245922\n--------silent-----------\n/kaggle/working/train.py:499: FutureWarning: mir_eval.separation.bss_eval_sources\n\tDeprecated as of mir_eval version 0.8.\n\tIt will be removed in mir_eval version 0.9.\n  sdr, _, _, _ = bss_eval_sources(\n 18%|████████                                    | 8/44 [00:51<03:55,  6.53s/it]/kaggle/working/train.py:505: FutureWarning: mir_eval.separation.bss_eval_sources\n\tDeprecated as of mir_eval version 0.8.\n\tIt will be removed in mir_eval version 0.9.\n  sdr_baseline, _, _, _ = bss_eval_sources(\n 18%|████████                                    | 8/44 [00:52<03:55,  6.54s/it]compute_forward 1 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000])\ncompute forward 2 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ntorch.Size([2, 160000])\n[[ 0.0000000e+00  0.0000000e+00  0.0000000e+00 ...  0.0000000e+00\n   0.0000000e+00  0.0000000e+00]\n [-5.7744597e-05 -1.2192529e-04 -8.5939588e-05 ...  1.6971910e-02\n   7.4585276e-03 -5.8214637e-03]]\ntorch.Size([2, 160000])\n[[ 1.3900446e-04  5.3003125e-05  2.1389975e-04 ...  2.2746919e-01\n  -5.2475814e-02  1.3536593e-01]\n [ 7.1286187e-05 -9.6475198e-08  6.9141046e-05 ... -4.8223814e-01\n  -2.7420849e-01  7.9357564e-02]]\ntorch.Size([2, 160000])\n[[-4.6923760e-05 -9.7181015e-05 -6.3371670e-05 ...  1.7301362e-02\n   7.9285176e-03 -5.1771919e-03]\n [-4.6923760e-05 -9.7181015e-05 -6.3371670e-05 ...  1.7301362e-02\n   7.9285176e-03 -5.1771919e-03]]\n0.0\n0.650982\n--------silent-----------\n 20%|█████████                                   | 9/44 [00:57<03:42,  6.34s/it]compute_forward 1 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000])\ncompute forward 2 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ntorch.Size([2, 160000])\n[[ 0.0000000e+00  0.0000000e+00  0.0000000e+00 ...  0.0000000e+00\n   0.0000000e+00  0.0000000e+00]\n [-5.7744597e-05 -1.2192529e-04 -8.5939588e-05 ...  1.6971910e-02\n   7.4585276e-03 -5.8214637e-03]]\ntorch.Size([2, 160000])\n[[ 1.3900446e-04  5.3003125e-05  2.1389975e-04 ...  2.2746919e-01\n  -5.2475814e-02  1.3536593e-01]\n [ 7.1286187e-05 -9.6475198e-08  6.9141046e-05 ... -4.8223814e-01\n  -2.7420849e-01  7.9357564e-02]]\ntorch.Size([2, 160000])\n[[-4.6923760e-05 -9.7181015e-05 -6.3371670e-05 ...  1.7301362e-02\n   7.9285176e-03 -5.1771919e-03]\n [-4.6923760e-05 -9.7181015e-05 -6.3371670e-05 ...  1.7301362e-02\n   7.9285176e-03 -5.1771919e-03]]\n0.0\n0.650982\n--------silent-----------\n 20%|█████████                                   | 9/44 [00:58<03:43,  6.38s/it]compute_forward 1 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000])\ncompute forward 2 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ntorch.Size([2, 160000])\n[[ 0.          0.          0.         ...  0.          0.\n   0.        ]\n [-0.00940681 -0.01278279 -0.01459435 ...  0.08524901  0.05109953\n  -0.0366962 ]]\ntorch.Size([2, 160000])\n[[ 0.04397842 -0.01814319  0.06486601 ... -1.242025   -0.2884914\n  -0.16432339]\n [ 0.00386425 -0.00886815  0.01980741 ... -0.8461922   0.04383219\n   0.1361729 ]]\ntorch.Size([2, 160000])\n[[-0.00940681 -0.01278279 -0.01459435 ...  0.08483274  0.05009175\n  -0.03758756]\n [-0.00940681 -0.01278279 -0.01459435 ...  0.08483274  0.05009175\n  -0.03758756]]\n0.0\n0.6048031\n--------silent-----------\n 23%|█████████▊                                 | 10/44 [01:02<03:20,  5.90s/it]compute_forward 1 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000])\ncompute forward 2 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ntorch.Size([2, 160000])\n[[ 0.          0.          0.         ...  0.          0.\n   0.        ]\n [-0.00940681 -0.01278279 -0.01459435 ...  0.08524901  0.05109953\n  -0.0366962 ]]\ntorch.Size([2, 160000])\n[[ 0.04397842 -0.01814319  0.06486601 ... -1.242025   -0.2884914\n  -0.16432339]\n [ 0.00386425 -0.00886815  0.01980741 ... -0.8461922   0.04383219\n   0.1361729 ]]\ntorch.Size([2, 160000])\n[[-0.00940681 -0.01278279 -0.01459435 ...  0.08483274  0.05009175\n  -0.03758756]\n [-0.00940681 -0.01278279 -0.01459435 ...  0.08483274  0.05009175\n  -0.03758756]]\n0.0\n0.6048031\n--------silent-----------\n 23%|█████████▊                                 | 10/44 [01:03<03:21,  5.91s/it]compute_forward 1 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000])\ncompute forward 2 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ntorch.Size([2, 160000])\n[[ 0.          0.          0.         ...  0.00366151 -0.00048801\n   0.00321733]\n [-0.00121413 -0.00174112 -0.00100697 ... -0.01230299 -0.00830884\n  -0.00248626]]\ntorch.Size([2, 160000])\n[[ 0.00139637  0.0001598   0.00117012 ...  0.04220325  0.02536861\n  -0.00621621]\n [ 0.00166402  0.00140439  0.00283259 ...  0.01288707 -0.02063961\n  -0.08882094]]\ntorch.Size([2, 160000])\n[[-0.0011944  -0.00171836 -0.00099073 ... -0.0087184  -0.0080407\n   0.00087772]\n [-0.0011944  -0.00171836 -0.00099073 ... -0.0087184  -0.0080407\n   0.00087772]]\n0.32564896\n0.49525183\n--------silent-----------\n12.738777\n6.5989532\n--------silent-----------\n0.4903803\n0.4903803\n--------silent-----------\n/kaggle/working/train.py:499: FutureWarning: mir_eval.separation.bss_eval_sources\n\tDeprecated as of mir_eval version 0.8.\n\tIt will be removed in mir_eval version 0.9.\n  sdr, _, _, _ = bss_eval_sources(\ncompute_forward 1 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000])\ncompute forward 2 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\n/kaggle/working/train.py:505: FutureWarning: mir_eval.separation.bss_eval_sources\n\tDeprecated as of mir_eval version 0.8.\n\tIt will be removed in mir_eval version 0.9.\n  sdr_baseline, _, _, _ = bss_eval_sources(\ncompute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ntorch.Size([2, 160000])\n[[ 0.          0.          0.         ...  0.00366151 -0.00048801\n   0.00321733]\n [-0.00121413 -0.00174112 -0.00100697 ... -0.01230299 -0.00830884\n  -0.00248626]]\ntorch.Size([2, 160000])\n[[ 0.00139637  0.0001598   0.00117012 ...  0.04220325  0.02536861\n  -0.00621621]\n [ 0.00166402  0.00140439  0.00283259 ...  0.01288707 -0.02063961\n  -0.08882094]]\ntorch.Size([2, 160000])\n[[-0.0011944  -0.00171836 -0.00099073 ... -0.0087184  -0.0080407\n   0.00087772]\n [-0.0011944  -0.00171836 -0.00099073 ... -0.0087184  -0.0080407\n   0.00087772]]\n0.32564896\n0.49525183\n--------silent-----------\n12.738777\n6.5989532\n--------silent-----------\n0.4903803\n0.4903803\n--------silent-----------\n/kaggle/working/train.py:499: FutureWarning: mir_eval.separation.bss_eval_sources\n\tDeprecated as of mir_eval version 0.8.\n\tIt will be removed in mir_eval version 0.9.\n  sdr, _, _, _ = bss_eval_sources(\n 25%|██████████▊                                | 11/44 [01:08<03:09,  5.75s/it]/kaggle/working/train.py:505: FutureWarning: mir_eval.separation.bss_eval_sources\n\tDeprecated as of mir_eval version 0.8.\n\tIt will be removed in mir_eval version 0.9.\n  sdr_baseline, _, _, _ = bss_eval_sources(\n 25%|██████████▊                                | 11/44 [01:08<03:08,  5.71s/it]compute_forward 1 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000])\ncompute forward 2 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ntorch.Size([2, 160000])\n[[ 0.          0.          0.         ...  0.          0.\n   0.        ]\n [ 0.          0.          0.         ... -0.06996101 -0.17103091\n  -0.04826031]]\ntorch.Size([2, 160000])\n[[ 0.          0.          0.         ...  1.1412424   0.91037935\n   0.36028063]\n [ 0.          0.          0.         ...  0.71590436 -0.01433335\n  -0.61450416]]\ntorch.Size([2, 160000])\n[[ 0.          0.          0.         ... -0.0676     -0.16804433\n  -0.03991468]\n [ 0.          0.          0.         ... -0.0676     -0.16804433\n  -0.03991468]]\n0.0\n0.65999925\n--------silent-----------\n 27%|███████████▋                               | 12/44 [01:14<03:10,  5.96s/it]compute_forward 1 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000])\ncompute forward 2 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ntorch.Size([2, 160000])\n[[ 0.          0.          0.         ...  0.          0.\n   0.        ]\n [ 0.          0.          0.         ... -0.06996101 -0.17103091\n  -0.04826031]]\ntorch.Size([2, 160000])\n[[ 0.          0.          0.         ...  1.1412424   0.91037935\n   0.36028063]\n [ 0.          0.          0.         ...  0.71590436 -0.01433335\n  -0.61450416]]\ntorch.Size([2, 160000])\n[[ 0.          0.          0.         ... -0.0676     -0.16804433\n  -0.03991468]\n [ 0.          0.          0.         ... -0.0676     -0.16804433\n  -0.03991468]]\n0.0\n0.65999925\n--------silent-----------\n 27%|███████████▋                               | 12/44 [01:15<03:12,  6.01s/it]compute_forward 1 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000])\ncompute forward 2 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute_forward 1 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000])\ncompute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ntorch.Size([2, 160000])\n[[ 0.          0.          0.         ...  0.          0.\n   0.        ]\n [ 0.          0.          0.         ... -0.18998353 -0.17666025\n  -0.1776844 ]]\ntorch.Size([2, 160000])\n[[0.         0.         0.         ... 3.5706818  0.06288347 2.2429636 ]\n [0.         0.         0.         ... 1.1467649  0.07073065 0.2550048 ]]\ntorch.Size([2, 160000])\n[[ 0.          0.          0.         ... -0.18753895 -0.17603222\n  -0.17767823]\n [ 0.          0.          0.         ... -0.18753895 -0.17603222\n  -0.17767823]]\n0.0\n0.6363853\n--------silent-----------\n 30%|████████████▋                              | 13/44 [01:23<03:35,  6.96s/it]compute forward 2 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ntorch.Size([2, 160000])\n[[ 0.          0.          0.         ...  0.          0.\n   0.        ]\n [ 0.          0.          0.         ... -0.18998353 -0.17666025\n  -0.1776844 ]]\ntorch.Size([2, 160000])\n[[0.         0.         0.         ... 3.5706818  0.06288347 2.2429636 ]\n [0.         0.         0.         ... 1.1467649  0.07073065 0.2550048 ]]\ntorch.Size([2, 160000])\n[[ 0.          0.          0.         ... -0.18753895 -0.17603222\n  -0.17767823]\n [ 0.          0.          0.         ... -0.18753895 -0.17603222\n  -0.17767823]]\n0.0\n0.6363853\n--------silent-----------\n 30%|████████████▋                              | 13/44 [01:24<03:33,  6.90s/it]compute_forward 1 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000])\ncompute forward 2 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute_forward 1 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000])\ncompute forward 2 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ntorch.Size([2, 160000])\n[[ 0.          0.          0.         ...  0.          0.\n   0.        ]\n [ 0.          0.          0.         ... -0.05668933 -0.04400451\n  -0.15122025]]\ntorch.Size([2, 160000])\n[[ 0.          0.          0.         ...  0.35419416  0.2791811\n   1.4450755 ]\n [ 0.          0.          0.         ... -0.15641245  0.46728647\n   0.4469201 ]]\ntorch.Size([2, 160000])\n[[ 0.          0.          0.         ... -0.05507053 -0.04254699\n  -0.14934447]\n [ 0.          0.          0.         ... -0.05507053 -0.04254699\n  -0.14934447]]\n0.0\n0.60699856\n--------silent-----------\n 32%|█████████████▋                             | 14/44 [01:31<03:34,  7.16s/it]compute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ntorch.Size([2, 160000])\n[[ 0.          0.          0.         ...  0.          0.\n   0.        ]\n [ 0.          0.          0.         ... -0.05668933 -0.04400451\n  -0.15122025]]\ntorch.Size([2, 160000])\n[[ 0.          0.          0.         ...  0.35419416  0.2791811\n   1.4450755 ]\n [ 0.          0.          0.         ... -0.15641245  0.46728647\n   0.4469201 ]]\ntorch.Size([2, 160000])\n[[ 0.          0.          0.         ... -0.05507053 -0.04254699\n  -0.14934447]\n [ 0.          0.          0.         ... -0.05507053 -0.04254699\n  -0.14934447]]\n0.0\n0.60699856\n--------silent-----------\n 32%|█████████████▋                             | 14/44 [01:31<03:32,  7.10s/it]compute_forward 1 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000])\ncompute forward 2 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute_forward 1 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000])\ncompute forward 2 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ntorch.Size([2, 160000])\n[[ 0.0000000e+00  0.0000000e+00  0.0000000e+00 ... -2.4311543e-05\n   6.8896596e-05 -2.4611572e-06]\n [ 0.0000000e+00  0.0000000e+00  0.0000000e+00 ... -7.5019844e-02\n  -1.5550941e-01 -1.9072936e-01]]\ntorch.Size([2, 160000])\n[[0.         0.         0.         ... 1.6889845  0.8005377  1.4543871 ]\n [0.         0.         0.         ... 0.7510301  0.49331537 0.06029832]]\ntorch.Size([2, 160000])\n[[ 0.          0.          0.         ... -0.07241233 -0.15109889\n  -0.18812111]\n [ 0.          0.          0.         ... -0.07241233 -0.15109889\n  -0.18812111]]\n6.8896596e-05\n0.62311244\n--------silent-----------\n13.796205\n5.2663136\n--------silent-----------\n0.6233089\n0.6233089\n--------silent-----------\n/kaggle/working/train.py:499: FutureWarning: mir_eval.separation.bss_eval_sources\n\tDeprecated as of mir_eval version 0.8.\n\tIt will be removed in mir_eval version 0.9.\n  sdr, _, _, _ = bss_eval_sources(\ncompute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ntorch.Size([2, 160000])\n[[ 0.0000000e+00  0.0000000e+00  0.0000000e+00 ... -2.4311543e-05\n   6.8896596e-05 -2.4611572e-06]\n [ 0.0000000e+00  0.0000000e+00  0.0000000e+00 ... -7.5019844e-02\n  -1.5550941e-01 -1.9072936e-01]]\ntorch.Size([2, 160000])\n[[0.         0.         0.         ... 1.6889845  0.8005377  1.4543871 ]\n [0.         0.         0.         ... 0.7510301  0.49331537 0.06029832]]\ntorch.Size([2, 160000])\n[[ 0.          0.          0.         ... -0.07241233 -0.15109889\n  -0.18812111]\n [ 0.          0.          0.         ... -0.07241233 -0.15109889\n  -0.18812111]]\n6.8896596e-05\n0.62311244\n--------silent-----------\n13.796205\n5.2663136\n--------silent-----------\n0.6233089\n0.6233089\n--------silent-----------\n/kaggle/working/train.py:499: FutureWarning: mir_eval.separation.bss_eval_sources\n\tDeprecated as of mir_eval version 0.8.\n\tIt will be removed in mir_eval version 0.9.\n  sdr, _, _, _ = bss_eval_sources(\n/kaggle/working/train.py:505: FutureWarning: mir_eval.separation.bss_eval_sources\n\tDeprecated as of mir_eval version 0.8.\n\tIt will be removed in mir_eval version 0.9.\n  sdr_baseline, _, _, _ = bss_eval_sources(\n/kaggle/working/train.py:505: FutureWarning: mir_eval.separation.bss_eval_sources\n\tDeprecated as of mir_eval version 0.8.\n\tIt will be removed in mir_eval version 0.9.\n  sdr_baseline, _, _, _ = bss_eval_sources(\n 34%|██████████████▋                            | 15/44 [01:36<03:03,  6.34s/it]compute_forward 1 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000])\ncompute forward 2 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute_forward 1 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000])\ncompute forward 2 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ntorch.Size([2, 160000])\n[[ 0.          0.          0.         ...  0.          0.\n   0.        ]\n [-0.00604599 -0.00971009 -0.00658256 ...  0.00255912  0.02458152\n   0.0259823 ]]\ntorch.Size([2, 160000])\n[[ 0.00160251 -0.00136873  0.0118175  ...  0.41274917 -0.25502542\n  -0.02757631]\n [ 0.01407738  0.01015503  0.02503345 ...  0.31316462 -0.23993053\n   0.06688336]]\ntorch.Size([2, 160000])\n[[-0.00604599 -0.00971009 -0.00658256 ...  0.00126133  0.02325958\n   0.02508032]\n [-0.00604599 -0.00971009 -0.00658256 ...  0.00126133  0.02325958\n   0.02508032]]\n0.0\n0.4702173\n--------silent-----------\n 36%|███████████████▋                           | 16/44 [01:42<03:02,  6.52s/it]compute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ntorch.Size([2, 160000])\n[[ 0.          0.          0.         ...  0.          0.\n   0.        ]\n [-0.00604599 -0.00971009 -0.00658256 ...  0.00255912  0.02458152\n   0.0259823 ]]\ntorch.Size([2, 160000])\n[[ 0.00160251 -0.00136873  0.0118175  ...  0.41274917 -0.25502542\n  -0.02757631]\n [ 0.01407738  0.01015503  0.02503345 ...  0.31316462 -0.23993053\n   0.06688336]]\ntorch.Size([2, 160000])\n[[-0.00604599 -0.00971009 -0.00658256 ...  0.00126133  0.02325958\n   0.02508032]\n [-0.00604599 -0.00971009 -0.00658256 ...  0.00126133  0.02325958\n   0.02508032]]\n0.0\n0.4702173\n--------silent-----------\n 36%|███████████████▋                           | 16/44 [01:43<03:01,  6.49s/it]compute_forward 1 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000])\ncompute forward 2 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute_forward 1 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000])\ncompute forward 2 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ntorch.Size([2, 160000])\n[[ 5.1876832e-06  1.9267629e-05  1.5561645e-05 ... -1.0068531e-04\n  -6.3317813e-05  7.5963188e-05]\n [ 0.0000000e+00  0.0000000e+00  0.0000000e+00 ...  5.3822044e-02\n   2.7696658e-02  1.2968105e-02]]\ntorch.Size([2, 160000])\n[[ 7.5690555e-06 -4.9607268e-05  1.7658374e-05 ... -7.2968054e-01\n  -4.7878814e-01 -1.2320426e-02]\n [-2.7346790e-05 -1.8655830e-05  6.4690435e-06 ... -1.9555986e-01\n   2.6505163e-03  1.5259719e-01]]\ntorch.Size([2, 160000])\n[[5.1876832e-06 1.9267629e-05 1.5561645e-05 ... 5.3642690e-02\n  2.7620960e-02 1.2782441e-02]\n [5.1876832e-06 1.9267629e-05 1.5561645e-05 ... 5.3642690e-02\n  2.7620960e-02 1.2782441e-02]]\n0.16913623\n0.09443913\n--------silent-----------\n2.8078973\n3.0741801\n--------silent-----------\n0.18096516\n0.18096516\n--------silent-----------\n/kaggle/working/train.py:499: FutureWarning: mir_eval.separation.bss_eval_sources\n\tDeprecated as of mir_eval version 0.8.\n\tIt will be removed in mir_eval version 0.9.\n  sdr, _, _, _ = bss_eval_sources(\ncompute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ntorch.Size([2, 160000])\n[[ 5.1876832e-06  1.9267629e-05  1.5561645e-05 ... -1.0068531e-04\n  -6.3317813e-05  7.5963188e-05]\n [ 0.0000000e+00  0.0000000e+00  0.0000000e+00 ...  5.3822044e-02\n   2.7696658e-02  1.2968105e-02]]\ntorch.Size([2, 160000])\n[[ 7.5690555e-06 -4.9607268e-05  1.7658374e-05 ... -7.2968054e-01\n  -4.7878814e-01 -1.2320426e-02]\n [-2.7346790e-05 -1.8655830e-05  6.4690435e-06 ... -1.9555986e-01\n   2.6505163e-03  1.5259719e-01]]\ntorch.Size([2, 160000])\n[[5.1876832e-06 1.9267629e-05 1.5561645e-05 ... 5.3642690e-02\n  2.7620960e-02 1.2782441e-02]\n [5.1876832e-06 1.9267629e-05 1.5561645e-05 ... 5.3642690e-02\n  2.7620960e-02 1.2782441e-02]]\n0.16913623\n0.09443913\n--------silent-----------\n2.8078973\n3.0741801\n--------silent-----------\n0.18096516\n0.18096516\n--------silent-----------\n/kaggle/working/train.py:499: FutureWarning: mir_eval.separation.bss_eval_sources\n\tDeprecated as of mir_eval version 0.8.\n\tIt will be removed in mir_eval version 0.9.\n  sdr, _, _, _ = bss_eval_sources(\n/kaggle/working/train.py:505: FutureWarning: mir_eval.separation.bss_eval_sources\n\tDeprecated as of mir_eval version 0.8.\n\tIt will be removed in mir_eval version 0.9.\n  sdr_baseline, _, _, _ = bss_eval_sources(\n/kaggle/working/train.py:505: FutureWarning: mir_eval.separation.bss_eval_sources\n\tDeprecated as of mir_eval version 0.8.\n\tIt will be removed in mir_eval version 0.9.\n  sdr_baseline, _, _, _ = bss_eval_sources(\n 39%|████████████████▌                          | 17/44 [01:49<02:55,  6.50s/it]compute_forward 1 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000])\ncompute forward 2 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute_forward 1 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000])\ncompute forward 2 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ntorch.Size([2, 160000])\n[[ 0.0000000e+00  0.0000000e+00  0.0000000e+00 ... -1.0578459e-03\n   4.6169927e-05  1.4288684e-03]\n [ 0.0000000e+00  0.0000000e+00  0.0000000e+00 ...  1.7968977e-02\n   3.1478789e-02  4.9063548e-02]]\ntorch.Size([2, 160000])\n[[ 0.          0.          0.         ...  0.12667182 -0.2979466\n  -0.27044898]\n [ 0.          0.          0.         ... -0.36994597 -0.42843705\n  -0.08573923]]\ntorch.Size([2, 160000])\n[[0.         0.         0.         ... 0.01807282 0.03188711 0.05056672]\n [0.         0.         0.         ... 0.01807282 0.03188711 0.05056672]]\n0.12189441\n0.2474128\n--------silent-----------\n4.885289\n4.8315334\n--------silent-----------\n0.2824304\n0.2824304\n--------silent-----------\n/kaggle/working/train.py:499: FutureWarning: mir_eval.separation.bss_eval_sources\n\tDeprecated as of mir_eval version 0.8.\n\tIt will be removed in mir_eval version 0.9.\n  sdr, _, _, _ = bss_eval_sources(\ncompute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ntorch.Size([2, 160000])\n[[ 0.0000000e+00  0.0000000e+00  0.0000000e+00 ... -1.0578459e-03\n   4.6169927e-05  1.4288684e-03]\n [ 0.0000000e+00  0.0000000e+00  0.0000000e+00 ...  1.7968977e-02\n   3.1478789e-02  4.9063548e-02]]\ntorch.Size([2, 160000])\n[[ 0.          0.          0.         ...  0.12667182 -0.2979466\n  -0.27044898]\n [ 0.          0.          0.         ... -0.36994597 -0.42843705\n  -0.08573923]]\ntorch.Size([2, 160000])\n[[0.         0.         0.         ... 0.01807282 0.03188711 0.05056672]\n [0.         0.         0.         ... 0.01807282 0.03188711 0.05056672]]\n0.12189441\n0.2474128\n--------silent-----------\n4.885289\n4.8315334\n--------silent-----------\n0.2824304\n0.2824304\n--------silent-----------\n/kaggle/working/train.py:499: FutureWarning: mir_eval.separation.bss_eval_sources\n\tDeprecated as of mir_eval version 0.8.\n\tIt will be removed in mir_eval version 0.9.\n  sdr, _, _, _ = bss_eval_sources(\n/kaggle/working/train.py:505: FutureWarning: mir_eval.separation.bss_eval_sources\n\tDeprecated as of mir_eval version 0.8.\n\tIt will be removed in mir_eval version 0.9.\n  sdr_baseline, _, _, _ = bss_eval_sources(\n/kaggle/working/train.py:505: FutureWarning: mir_eval.separation.bss_eval_sources\n\tDeprecated as of mir_eval version 0.8.\n\tIt will be removed in mir_eval version 0.9.\n  sdr_baseline, _, _, _ = bss_eval_sources(\n 41%|█████████████████▌                         | 18/44 [01:56<02:50,  6.55s/it]compute_forward 1 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000])\ncompute forward 2 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute_forward 1 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000])\ncompute forward 2 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ntorch.Size([2, 160000])\n[[ 0.          0.          0.         ...  0.          0.\n   0.        ]\n [ 0.          0.          0.         ...  0.02609352 -0.05537749\n   0.02488788]]\ntorch.Size([2, 160000])\n[[ 0.          0.          0.         ...  0.0241358   0.38767833\n   0.2666473 ]\n [ 0.          0.          0.         ... -0.03584043  0.18856841\n   0.18471046]]\ntorch.Size([2, 160000])\n[[ 0.          0.          0.         ...  0.02921457 -0.05330158\n   0.02198358]\n [ 0.          0.          0.         ...  0.02921457 -0.05330158\n   0.02198358]]\n0.0\n0.44814503\n--------silent-----------\n 43%|██████████████████▌                        | 19/44 [02:01<02:33,  6.13s/it]compute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ntorch.Size([2, 160000])\n[[ 0.          0.          0.         ...  0.          0.\n   0.        ]\n [ 0.          0.          0.         ...  0.02609352 -0.05537749\n   0.02488788]]\ntorch.Size([2, 160000])\n[[ 0.          0.          0.         ...  0.0241358   0.38767833\n   0.2666473 ]\n [ 0.          0.          0.         ... -0.03584043  0.18856841\n   0.18471046]]\ntorch.Size([2, 160000])\n[[ 0.          0.          0.         ...  0.02921457 -0.05330158\n   0.02198358]\n [ 0.          0.          0.         ...  0.02921457 -0.05330158\n   0.02198358]]\n0.0\n0.44814503\n--------silent-----------\n 43%|██████████████████▌                        | 19/44 [02:01<02:32,  6.10s/it]compute_forward 1 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000])\ncompute forward 2 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute_forward 1 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000])\ncompute forward 2 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ntorch.Size([2, 160000])\n[[ 0.0000000e+00  0.0000000e+00  0.0000000e+00 ... -1.2656334e-01\n  -3.2437067e-02  8.8075548e-02]\n [ 6.6248915e-29  6.6248915e-29  6.6248915e-29 ...  1.4306672e-02\n   6.7843363e-02  1.8188873e-01]]\ntorch.Size([2, 160000])\n[[-2.0271720e-28 -1.5752406e-28 -4.2028666e-29 ...  2.3014903e+00\n  -4.7163537e-01 -7.1988505e-01]\n [ 2.3658603e-29 -7.7929782e-29  6.2239466e-29 ...  1.6004195e+00\n  -8.9386445e-01 -9.5667350e-01]]\ntorch.Size([2, 160000])\n[[ 6.62489146e-29  6.62489146e-29  6.62489146e-29 ... -1.14198275e-01\n   3.52423377e-02  2.70288885e-01]\n [ 6.62489146e-29  6.62489146e-29  6.62489146e-29 ... -1.14198275e-01\n   3.52423377e-02  2.70288885e-01]]\n0.16722411\n0.5329978\n--------silent-----------\n11.762684\n4.991471\n--------silent-----------\n0.5319234\n0.5319234\n--------silent-----------\n/kaggle/working/train.py:499: FutureWarning: mir_eval.separation.bss_eval_sources\n\tDeprecated as of mir_eval version 0.8.\n\tIt will be removed in mir_eval version 0.9.\n  sdr, _, _, _ = bss_eval_sources(\ncompute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ntorch.Size([2, 160000])\n[[ 0.0000000e+00  0.0000000e+00  0.0000000e+00 ... -1.2656334e-01\n  -3.2437067e-02  8.8075548e-02]\n [ 6.6248915e-29  6.6248915e-29  6.6248915e-29 ...  1.4306672e-02\n   6.7843363e-02  1.8188873e-01]]\ntorch.Size([2, 160000])\n[[-2.0271720e-28 -1.5752406e-28 -4.2028666e-29 ...  2.3014903e+00\n  -4.7163537e-01 -7.1988505e-01]\n [ 2.3658603e-29 -7.7929782e-29  6.2239466e-29 ...  1.6004195e+00\n  -8.9386445e-01 -9.5667350e-01]]\ntorch.Size([2, 160000])\n[[ 6.62489146e-29  6.62489146e-29  6.62489146e-29 ... -1.14198275e-01\n   3.52423377e-02  2.70288885e-01]\n [ 6.62489146e-29  6.62489146e-29  6.62489146e-29 ... -1.14198275e-01\n   3.52423377e-02  2.70288885e-01]]\n0.16722411\n0.5329978\n--------silent-----------\n11.762684\n4.991471\n--------silent-----------\n0.5319234\n0.5319234\n--------silent-----------\n/kaggle/working/train.py:499: FutureWarning: mir_eval.separation.bss_eval_sources\n\tDeprecated as of mir_eval version 0.8.\n\tIt will be removed in mir_eval version 0.9.\n  sdr, _, _, _ = bss_eval_sources(\n/kaggle/working/train.py:505: FutureWarning: mir_eval.separation.bss_eval_sources\n\tDeprecated as of mir_eval version 0.8.\n\tIt will be removed in mir_eval version 0.9.\n  sdr_baseline, _, _, _ = bss_eval_sources(\n/kaggle/working/train.py:505: FutureWarning: mir_eval.separation.bss_eval_sources\n\tDeprecated as of mir_eval version 0.8.\n\tIt will be removed in mir_eval version 0.9.\n  sdr_baseline, _, _, _ = bss_eval_sources(\n 45%|███████████████████▌                       | 20/44 [02:07<02:28,  6.17s/it]compute_forward 1 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000])\ncompute forward 2 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute_forward 1 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000])\ncompute forward 2 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ntorch.Size([2, 160000])\n[[ 0.          0.          0.         ...  0.04605149  0.03184607\n   0.01953328]\n [-0.0055897  -0.00343408  0.00541805 ...  0.08256327  0.05195921\n   0.02993496]]\ntorch.Size([2, 160000])\n[[-0.0209505  -0.069199   -0.01220404 ... -2.038332   -1.3728924\n  -0.19224438]\n [ 0.03002721 -0.00982988  0.03236504 ... -0.46801203 -0.42940855\n   0.5605547 ]]\ntorch.Size([2, 160000])\n[[-0.0055897  -0.00343408  0.00541805 ...  0.12941468  0.0843007\n   0.05037824]\n [-0.0055897  -0.00343408  0.00541805 ...  0.12941468  0.0843007\n   0.05037824]]\n0.3043859\n0.7781428\n--------silent-----------\n21.940786\n6.1386156\n--------silent-----------\n0.7425709\n0.7425709\n--------silent-----------\n/kaggle/working/train.py:499: FutureWarning: mir_eval.separation.bss_eval_sources\n\tDeprecated as of mir_eval version 0.8.\n\tIt will be removed in mir_eval version 0.9.\n  sdr, _, _, _ = bss_eval_sources(\ncompute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ntorch.Size([2, 160000])\n[[ 0.          0.          0.         ...  0.04605149  0.03184607\n   0.01953328]\n [-0.0055897  -0.00343408  0.00541805 ...  0.08256327  0.05195921\n   0.02993496]]\ntorch.Size([2, 160000])\n[[-0.0209505  -0.069199   -0.01220404 ... -2.038332   -1.3728924\n  -0.19224438]\n [ 0.03002721 -0.00982988  0.03236504 ... -0.46801203 -0.42940855\n   0.5605547 ]]\ntorch.Size([2, 160000])\n[[-0.0055897  -0.00343408  0.00541805 ...  0.12941468  0.0843007\n   0.05037824]\n [-0.0055897  -0.00343408  0.00541805 ...  0.12941468  0.0843007\n   0.05037824]]\n0.3043859\n0.7781428\n--------silent-----------\n21.940786\n6.1386156\n--------silent-----------\n0.7425709\n0.7425709\n--------silent-----------\n/kaggle/working/train.py:499: FutureWarning: mir_eval.separation.bss_eval_sources\n\tDeprecated as of mir_eval version 0.8.\n\tIt will be removed in mir_eval version 0.9.\n  sdr, _, _, _ = bss_eval_sources(\n/kaggle/working/train.py:505: FutureWarning: mir_eval.separation.bss_eval_sources\n\tDeprecated as of mir_eval version 0.8.\n\tIt will be removed in mir_eval version 0.9.\n  sdr_baseline, _, _, _ = bss_eval_sources(\n/kaggle/working/train.py:505: FutureWarning: mir_eval.separation.bss_eval_sources\n\tDeprecated as of mir_eval version 0.8.\n\tIt will be removed in mir_eval version 0.9.\n  sdr_baseline, _, _, _ = bss_eval_sources(\n 48%|████████████████████▌                      | 21/44 [02:14<02:27,  6.41s/it]compute_forward 1 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000])\ncompute forward 2 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute_forward 1 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000])\ncompute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ntorch.Size([2, 160000])\n[[ 1.3775920e-05 -5.9157639e-05 -1.7285507e-05 ...  3.5936385e-02\n   2.3192886e-02  2.1929286e-02]\n [ 5.8614578e-02  9.6331686e-02  8.5850194e-02 ...  1.5122082e-02\n   2.1329891e-02  3.0050892e-02]]\ntorch.Size([2, 160000])\n[[-0.09971544 -0.16549924 -0.1345752  ... -0.6958393  -0.5391101\n  -0.5514047 ]\n [-0.06286879 -0.1571644  -0.15012453 ... -0.30199346 -0.28017795\n  -0.24601197]]\ntorch.Size([2, 160000])\n[[0.05863626 0.09640249 0.08583198 ... 0.05170986 0.04541122 0.05277757]\n [0.05863626 0.09640249 0.08583198 ... 0.05170986 0.04541122 0.05277757]]\n0.16335943\n0.6215053\n--------silent-----------\n16.957985\n4.960923\n--------silent-----------\n0.61728394\n0.61728394\n--------silent-----------\n/kaggle/working/train.py:499: FutureWarning: mir_eval.separation.bss_eval_sources\n\tDeprecated as of mir_eval version 0.8.\n\tIt will be removed in mir_eval version 0.9.\n  sdr, _, _, _ = bss_eval_sources(\ncompute forward 2 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ntorch.Size([2, 160000])\n[[ 1.3775920e-05 -5.9157639e-05 -1.7285507e-05 ...  3.5936385e-02\n   2.3192886e-02  2.1929286e-02]\n [ 5.8614578e-02  9.6331686e-02  8.5850194e-02 ...  1.5122082e-02\n   2.1329891e-02  3.0050892e-02]]\ntorch.Size([2, 160000])\n[[-0.09971544 -0.16549924 -0.1345752  ... -0.6958393  -0.5391101\n  -0.5514047 ]\n [-0.06286879 -0.1571644  -0.15012453 ... -0.30199346 -0.28017795\n  -0.24601197]]\ntorch.Size([2, 160000])\n[[0.05863626 0.09640249 0.08583198 ... 0.05170986 0.04541122 0.05277757]\n [0.05863626 0.09640249 0.08583198 ... 0.05170986 0.04541122 0.05277757]]\n0.16335943\n0.6215053\n--------silent-----------\n16.957985\n4.960923\n--------silent-----------\n0.61728394\n0.61728394\n--------silent-----------\n/kaggle/working/train.py:499: FutureWarning: mir_eval.separation.bss_eval_sources\n\tDeprecated as of mir_eval version 0.8.\n\tIt will be removed in mir_eval version 0.9.\n  sdr, _, _, _ = bss_eval_sources(\n/kaggle/working/train.py:505: FutureWarning: mir_eval.separation.bss_eval_sources\n\tDeprecated as of mir_eval version 0.8.\n\tIt will be removed in mir_eval version 0.9.\n  sdr_baseline, _, _, _ = bss_eval_sources(\n/kaggle/working/train.py:505: FutureWarning: mir_eval.separation.bss_eval_sources\n\tDeprecated as of mir_eval version 0.8.\n\tIt will be removed in mir_eval version 0.9.\n  sdr_baseline, _, _, _ = bss_eval_sources(\n 50%|█████████████████████▌                     | 22/44 [02:23<02:35,  7.06s/it]compute_forward 1 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000])\ncompute forward 2 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute_forward 1 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000])\ncompute forward 2 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ntorch.Size([2, 160000])\n[[-4.8048314e-06 -8.6990203e-06 -9.4837305e-06 ... -1.8960689e-05\n  -1.1271659e-05  3.3220213e-06]\n [ 2.9640917e-02 -4.6110056e-02 -5.3229909e-03 ... -2.9233739e-02\n   3.0208983e-02  4.1430511e-02]]\ntorch.Size([2, 160000])\n[[-0.04678786  0.03236162 -0.03988187 ...  0.49148902  0.13051482\n   0.10212427]\n [-0.0383317   0.01686275 -0.00371229 ... -0.33565634 -0.30578643\n   0.07337543]]\ntorch.Size([2, 160000])\n[[ 0.02962489 -0.04621114 -0.0055067  ... -0.03162086  0.02780952\n   0.04333296]\n [ 0.02962489 -0.04621114 -0.0055067  ... -0.03162086  0.02780952\n   0.04333296]]\n3.0028012e-05\n0.7542943\n--------silent-----------\n19.503342\n11.563155\n--------silent-----------\n0.7584388\n0.7584388\n--------silent-----------\n/kaggle/working/train.py:499: FutureWarning: mir_eval.separation.bss_eval_sources\n\tDeprecated as of mir_eval version 0.8.\n\tIt will be removed in mir_eval version 0.9.\n  sdr, _, _, _ = bss_eval_sources(\ncompute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ntorch.Size([2, 160000])\n[[-4.8048314e-06 -8.6990203e-06 -9.4837305e-06 ... -1.8960689e-05\n  -1.1271659e-05  3.3220213e-06]\n [ 2.9640917e-02 -4.6110056e-02 -5.3229909e-03 ... -2.9233739e-02\n   3.0208983e-02  4.1430511e-02]]\ntorch.Size([2, 160000])\n[[-0.04678786  0.03236162 -0.03988187 ...  0.49148902  0.13051482\n   0.10212427]\n [-0.0383317   0.01686275 -0.00371229 ... -0.33565634 -0.30578643\n   0.07337543]]\ntorch.Size([2, 160000])\n[[ 0.02962489 -0.04621114 -0.0055067  ... -0.03162086  0.02780952\n   0.04333296]\n [ 0.02962489 -0.04621114 -0.0055067  ... -0.03162086  0.02780952\n   0.04333296]]\n3.0028012e-05\n0.7542943\n--------silent-----------\n19.503342\n11.563155\n--------silent-----------\n0.7584388\n0.7584388\n--------silent-----------\n/kaggle/working/train.py:499: FutureWarning: mir_eval.separation.bss_eval_sources\n\tDeprecated as of mir_eval version 0.8.\n\tIt will be removed in mir_eval version 0.9.\n  sdr, _, _, _ = bss_eval_sources(\n/kaggle/working/train.py:505: FutureWarning: mir_eval.separation.bss_eval_sources\n\tDeprecated as of mir_eval version 0.8.\n\tIt will be removed in mir_eval version 0.9.\n  sdr_baseline, _, _, _ = bss_eval_sources(\n/kaggle/working/train.py:505: FutureWarning: mir_eval.separation.bss_eval_sources\n\tDeprecated as of mir_eval version 0.8.\n\tIt will be removed in mir_eval version 0.9.\n  sdr_baseline, _, _, _ = bss_eval_sources(\n 52%|██████████████████████▍                    | 23/44 [02:28<02:14,  6.42s/it]compute_forward 1 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000])\ncompute forward 2 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute_forward 1 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000])\ncompute forward 2 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ntorch.Size([2, 160000])\n[[-3.9967921e-07  4.3842701e-06 -1.2247684e-06 ... -1.4384419e-06\n   1.3421750e-06  3.0409867e-06]\n [-1.0810242e-02 -2.1976814e-02  1.0939576e-03 ...  1.2750098e-02\n  -4.2745128e-02 -9.7325936e-02]]\ntorch.Size([2, 160000])\n[[ 0.00792857 -0.00511516  0.04103076 ... -0.07837509 -0.02732342\n   0.6612099 ]\n [-0.00101393  0.01455161  0.02615361 ...  0.29456103  0.36732516\n   0.49481705]]\ntorch.Size([2, 160000])\n[[-0.00362937 -0.00759975  0.00951673 ... -0.00035281 -0.04143511\n  -0.08295097]\n [-0.00362937 -0.00759975  0.00951673 ... -0.00035281 -0.04143511\n  -0.08295097]]\n0.23174286\n0.76909834\n--------silent-----------\n17.723577\n8.388105\n--------silent-----------\n0.64002204\n0.64002204\n--------silent-----------\n/kaggle/working/train.py:499: FutureWarning: mir_eval.separation.bss_eval_sources\n\tDeprecated as of mir_eval version 0.8.\n\tIt will be removed in mir_eval version 0.9.\n  sdr, _, _, _ = bss_eval_sources(\ncompute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ntorch.Size([2, 160000])\n[[-3.9967921e-07  4.3842701e-06 -1.2247684e-06 ... -1.4384419e-06\n   1.3421750e-06  3.0409867e-06]\n [-1.0810242e-02 -2.1976814e-02  1.0939576e-03 ...  1.2750098e-02\n  -4.2745128e-02 -9.7325936e-02]]\ntorch.Size([2, 160000])\n[[ 0.00792857 -0.00511516  0.04103076 ... -0.07837509 -0.02732342\n   0.6612099 ]\n [-0.00101393  0.01455161  0.02615361 ...  0.29456103  0.36732516\n   0.49481705]]\ntorch.Size([2, 160000])\n[[-0.00362937 -0.00759975  0.00951673 ... -0.00035281 -0.04143511\n  -0.08295097]\n [-0.00362937 -0.00759975  0.00951673 ... -0.00035281 -0.04143511\n  -0.08295097]]\n0.23174286\n0.76909834\n--------silent-----------\n17.723577\n8.388105\n--------silent-----------\n0.64002204\n0.64002204\n--------silent-----------\n/kaggle/working/train.py:499: FutureWarning: mir_eval.separation.bss_eval_sources\n\tDeprecated as of mir_eval version 0.8.\n\tIt will be removed in mir_eval version 0.9.\n  sdr, _, _, _ = bss_eval_sources(\n/kaggle/working/train.py:505: FutureWarning: mir_eval.separation.bss_eval_sources\n\tDeprecated as of mir_eval version 0.8.\n\tIt will be removed in mir_eval version 0.9.\n  sdr_baseline, _, _, _ = bss_eval_sources(\n/kaggle/working/train.py:505: FutureWarning: mir_eval.separation.bss_eval_sources\n\tDeprecated as of mir_eval version 0.8.\n\tIt will be removed in mir_eval version 0.9.\n  sdr_baseline, _, _, _ = bss_eval_sources(\n 55%|███████████████████████▍                   | 24/44 [02:31<01:50,  5.53s/it]compute_forward 1 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000])\ncompute forward 2 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute_forward 1 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000])\ncompute forward 2 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ntorch.Size([2, 160000])\n[[ 0.          0.          0.         ... -0.00315621 -0.00061833\n  -0.01831636]\n [ 0.          0.          0.         ... -0.02250263  0.00476585\n  -0.01319384]]\ntorch.Size([2, 160000])\n[[ 0.          0.          0.         ...  0.17093483 -0.00216341\n   0.00127731]\n [ 0.          0.          0.         ...  0.2756791   0.04761417\n   0.01345751]]\ntorch.Size([2, 160000])\n[[ 0.          0.          0.         ... -0.026624    0.00343858\n  -0.02919999]\n [ 0.          0.          0.         ... -0.026624    0.00343858\n  -0.02919999]]\n0.2976046\n0.70844114\n--------silent-----------\n20.613993\n7.093768\n--------silent-----------\n0.7406681\n0.7406681\n--------silent-----------\n/kaggle/working/train.py:499: FutureWarning: mir_eval.separation.bss_eval_sources\n\tDeprecated as of mir_eval version 0.8.\n\tIt will be removed in mir_eval version 0.9.\n  sdr, _, _, _ = bss_eval_sources(\ncompute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ntorch.Size([2, 160000])\n[[ 0.          0.          0.         ... -0.00315621 -0.00061833\n  -0.01831636]\n [ 0.          0.          0.         ... -0.02250263  0.00476585\n  -0.01319384]]\ntorch.Size([2, 160000])\n[[ 0.          0.          0.         ...  0.17093483 -0.00216341\n   0.00127731]\n [ 0.          0.          0.         ...  0.2756791   0.04761417\n   0.01345751]]\ntorch.Size([2, 160000])\n[[ 0.          0.          0.         ... -0.026624    0.00343858\n  -0.02919999]\n [ 0.          0.          0.         ... -0.026624    0.00343858\n  -0.02919999]]\n0.2976046\n0.70844114\n--------silent-----------\n20.613993\n7.093768\n--------silent-----------\n0.7406681\n0.7406681\n--------silent-----------\n/kaggle/working/train.py:499: FutureWarning: mir_eval.separation.bss_eval_sources\n\tDeprecated as of mir_eval version 0.8.\n\tIt will be removed in mir_eval version 0.9.\n  sdr, _, _, _ = bss_eval_sources(\n/kaggle/working/train.py:505: FutureWarning: mir_eval.separation.bss_eval_sources\n\tDeprecated as of mir_eval version 0.8.\n\tIt will be removed in mir_eval version 0.9.\n  sdr_baseline, _, _, _ = bss_eval_sources(\n/kaggle/working/train.py:505: FutureWarning: mir_eval.separation.bss_eval_sources\n\tDeprecated as of mir_eval version 0.8.\n\tIt will be removed in mir_eval version 0.9.\n  sdr_baseline, _, _, _ = bss_eval_sources(\n 57%|████████████████████████▍                  | 25/44 [02:38<01:50,  5.82s/it]compute_forward 1 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000])\ncompute_forward 1 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000])\ncompute forward 2 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute forward 2 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ntorch.Size([2, 160000])\n[[ 0.          0.          0.         ...  0.          0.\n   0.        ]\n [ 0.          0.          0.         ... -0.09279945 -0.07032407\n  -0.08625417]]\ntorch.Size([2, 160000])\n[[ 0.          0.          0.         ...  1.478808    0.09593026\n   1.1618582 ]\n [ 0.          0.          0.         ...  0.20907763 -0.06031323\n   0.07959955]]\ntorch.Size([2, 160000])\n[[ 0.          0.          0.         ... -0.0922366  -0.07045864\n  -0.08590931]\n [ 0.          0.          0.         ... -0.0922366  -0.07045864\n  -0.08590931]]\n0.0\n0.4660318\n--------silent-----------\n 59%|█████████████████████████▍                 | 26/44 [02:43<01:43,  5.76s/it]compute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ntorch.Size([2, 160000])\n[[ 0.          0.          0.         ...  0.          0.\n   0.        ]\n [ 0.          0.          0.         ... -0.09279945 -0.07032407\n  -0.08625417]]\ntorch.Size([2, 160000])\n[[ 0.          0.          0.         ...  1.478808    0.09593026\n   1.1618582 ]\n [ 0.          0.          0.         ...  0.20907763 -0.06031323\n   0.07959955]]\ntorch.Size([2, 160000])\n[[ 0.          0.          0.         ... -0.0922366  -0.07045864\n  -0.08590931]\n [ 0.          0.          0.         ... -0.0922366  -0.07045864\n  -0.08590931]]\n0.0\n0.4660318\n--------silent-----------\n 59%|█████████████████████████▍                 | 26/44 [02:43<01:43,  5.73s/it]compute_forward 1 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000])\ncompute forward 2 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute_forward 1 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000])\ncompute forward 2 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ntorch.Size([2, 160000])\n[[ 0.0000000e+00  0.0000000e+00  0.0000000e+00 ...  0.0000000e+00\n   0.0000000e+00  0.0000000e+00]\n [-1.1050320e-05 -2.7437076e-05 -7.4113727e-06 ...  2.1536771e-02\n   3.0102741e-02  2.0654688e-02]]\ntorch.Size([2, 160000])\n[[ 2.9913192e-05  1.1789468e-05  2.4967831e-06 ... -1.3134012e-01\n  -3.6673030e-01 -1.6537422e-01]\n [ 9.1432539e-06  1.2935225e-05  2.1933209e-05 ... -2.4079649e-01\n  -3.5924467e-01  7.2533511e-02]]\ntorch.Size([2, 160000])\n[[-1.1050320e-05 -2.7437076e-05 -7.4113727e-06 ...  2.1536771e-02\n   3.0102741e-02  2.0654688e-02]\n [-1.1050320e-05 -2.7437076e-05 -7.4113727e-06 ...  2.1536771e-02\n   3.0102741e-02  2.0654688e-02]]\n0.5163463\n0.27616018\n--------silent-----------\n9.635309\n10.519379\n--------silent-----------\n0.52778685\n0.52778685\n--------silent-----------\n/kaggle/working/train.py:499: FutureWarning: mir_eval.separation.bss_eval_sources\n\tDeprecated as of mir_eval version 0.8.\n\tIt will be removed in mir_eval version 0.9.\n  sdr, _, _, _ = bss_eval_sources(\ncompute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ntorch.Size([2, 160000])\n[[ 0.0000000e+00  0.0000000e+00  0.0000000e+00 ...  0.0000000e+00\n   0.0000000e+00  0.0000000e+00]\n [-1.1050320e-05 -2.7437076e-05 -7.4113727e-06 ...  2.1536771e-02\n   3.0102741e-02  2.0654688e-02]]\ntorch.Size([2, 160000])\n[[ 2.9913192e-05  1.1789468e-05  2.4967831e-06 ... -1.3134012e-01\n  -3.6673030e-01 -1.6537422e-01]\n [ 9.1432539e-06  1.2935225e-05  2.1933209e-05 ... -2.4079649e-01\n  -3.5924467e-01  7.2533511e-02]]\ntorch.Size([2, 160000])\n[[-1.1050320e-05 -2.7437076e-05 -7.4113727e-06 ...  2.1536771e-02\n   3.0102741e-02  2.0654688e-02]\n [-1.1050320e-05 -2.7437076e-05 -7.4113727e-06 ...  2.1536771e-02\n   3.0102741e-02  2.0654688e-02]]\n0.5163463\n0.27616018\n--------silent-----------\n9.635309\n10.519379\n--------silent-----------\n0.52778685\n0.52778685\n--------silent-----------\n/kaggle/working/train.py:499: FutureWarning: mir_eval.separation.bss_eval_sources\n\tDeprecated as of mir_eval version 0.8.\n\tIt will be removed in mir_eval version 0.9.\n  sdr, _, _, _ = bss_eval_sources(\n/kaggle/working/train.py:505: FutureWarning: mir_eval.separation.bss_eval_sources\n\tDeprecated as of mir_eval version 0.8.\n\tIt will be removed in mir_eval version 0.9.\n  sdr_baseline, _, _, _ = bss_eval_sources(\n/kaggle/working/train.py:505: FutureWarning: mir_eval.separation.bss_eval_sources\n\tDeprecated as of mir_eval version 0.8.\n\tIt will be removed in mir_eval version 0.9.\n  sdr_baseline, _, _, _ = bss_eval_sources(\n 61%|██████████████████████████▍                | 27/44 [02:51<01:50,  6.52s/it]compute_forward 1 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000])\ncompute forward 2 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute_forward 1 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000])\ncompute forward 2 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ntorch.Size([2, 160000])\n[[ 0.          0.          0.         ...  0.04122333  0.02660363\n   0.03507231]\n [-0.00093253  0.0745669   0.09845722 ... -0.13712156 -0.12514521\n  -0.16325939]]\ntorch.Size([2, 160000])\n[[-0.16193035 -0.18945333 -0.15353493 ...  2.0403109   0.55202985\n   1.4137793 ]\n [-0.02070037 -0.11697893 -0.04164172 ...  0.4985356   0.49019977\n   0.15960401]]\ntorch.Size([2, 160000])\n[[-0.00095069  0.07494029  0.0981819  ... -0.0944037  -0.09857228\n  -0.12576164]\n [-0.00095069  0.07494029  0.0981819  ... -0.0944037  -0.09857228\n  -0.12576164]]\n0.20779753\n0.56115615\n--------silent-----------\n14.268081\n5.3123326\n--------silent-----------\n0.55955344\n0.55955344\n--------silent-----------\n/kaggle/working/train.py:499: FutureWarning: mir_eval.separation.bss_eval_sources\n\tDeprecated as of mir_eval version 0.8.\n\tIt will be removed in mir_eval version 0.9.\n  sdr, _, _, _ = bss_eval_sources(\ncompute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ntorch.Size([2, 160000])\n[[ 0.          0.          0.         ...  0.04122333  0.02660363\n   0.03507231]\n [-0.00093253  0.0745669   0.09845722 ... -0.13712156 -0.12514521\n  -0.16325939]]\ntorch.Size([2, 160000])\n[[-0.16193035 -0.18945333 -0.15353493 ...  2.0403109   0.55202985\n   1.4137793 ]\n [-0.02070037 -0.11697893 -0.04164172 ...  0.4985356   0.49019977\n   0.15960401]]\ntorch.Size([2, 160000])\n[[-0.00095069  0.07494029  0.0981819  ... -0.0944037  -0.09857228\n  -0.12576164]\n [-0.00095069  0.07494029  0.0981819  ... -0.0944037  -0.09857228\n  -0.12576164]]\n0.20779753\n0.56115615\n--------silent-----------\n14.268081\n5.3123326\n--------silent-----------\n0.55955344\n0.55955344\n--------silent-----------\n/kaggle/working/train.py:499: FutureWarning: mir_eval.separation.bss_eval_sources\n\tDeprecated as of mir_eval version 0.8.\n\tIt will be removed in mir_eval version 0.9.\n  sdr, _, _, _ = bss_eval_sources(\n/kaggle/working/train.py:505: FutureWarning: mir_eval.separation.bss_eval_sources\n\tDeprecated as of mir_eval version 0.8.\n\tIt will be removed in mir_eval version 0.9.\n  sdr_baseline, _, _, _ = bss_eval_sources(\n/kaggle/working/train.py:505: FutureWarning: mir_eval.separation.bss_eval_sources\n\tDeprecated as of mir_eval version 0.8.\n\tIt will be removed in mir_eval version 0.9.\n  sdr_baseline, _, _, _ = bss_eval_sources(\n 64%|███████████████████████████▎               | 28/44 [02:59<01:50,  6.88s/it]compute_forward 1 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000])\ncompute forward 2 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute_forward 1 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000])\ncompute forward 2 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ntorch.Size([2, 160000])\n[[ 0.0000000e+00  0.0000000e+00  0.0000000e+00 ...  0.0000000e+00\n   0.0000000e+00  0.0000000e+00]\n [-1.6412003e-05 -4.4804619e-05 -3.9548078e-05 ... -2.8736845e-01\n  -3.1234735e-01 -4.1018954e-01]]\ntorch.Size([2, 160000])\n[[ 5.1619405e-05 -2.4119778e-05  2.0196701e-04 ...  5.7765441e+00\n   4.5401114e-01  3.4713809e+00]\n [ 9.8218843e-06 -5.9963280e-05 -2.5785641e-07 ...  1.1932670e+00\n  -1.6576837e-01 -2.8368775e-02]]\ntorch.Size([2, 160000])\n[[-1.6412003e-05 -4.4804619e-05 -3.9548078e-05 ... -2.8707308e-01\n  -3.0702311e-01 -4.0606147e-01]\n [-1.6412003e-05 -4.4804619e-05 -3.9548078e-05 ... -2.8707308e-01\n  -3.0702311e-01 -4.0606147e-01]]\n0.0\n0.65402824\n--------silent-----------\n 66%|████████████████████████████▎              | 29/44 [03:05<01:40,  6.70s/it]compute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ntorch.Size([2, 160000])\n[[ 0.0000000e+00  0.0000000e+00  0.0000000e+00 ...  0.0000000e+00\n   0.0000000e+00  0.0000000e+00]\n [-1.6412003e-05 -4.4804619e-05 -3.9548078e-05 ... -2.8736845e-01\n  -3.1234735e-01 -4.1018954e-01]]\ntorch.Size([2, 160000])\n[[ 5.1619405e-05 -2.4119778e-05  2.0196701e-04 ...  5.7765441e+00\n   4.5401114e-01  3.4713809e+00]\n [ 9.8218843e-06 -5.9963280e-05 -2.5785641e-07 ...  1.1932670e+00\n  -1.6576837e-01 -2.8368775e-02]]\ntorch.Size([2, 160000])\n[[-1.6412003e-05 -4.4804619e-05 -3.9548078e-05 ... -2.8707308e-01\n  -3.0702311e-01 -4.0606147e-01]\n [-1.6412003e-05 -4.4804619e-05 -3.9548078e-05 ... -2.8707308e-01\n  -3.0702311e-01 -4.0606147e-01]]\n0.0\n0.65402824\n--------silent-----------\n 66%|████████████████████████████▎              | 29/44 [03:05<01:40,  6.68s/it]compute_forward 1 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000])\ncompute forward 2 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute_forward 1 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000])\ncompute forward 2 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ntorch.Size([2, 160000])\n[[ 0.          0.          0.         ...  0.16227493  0.19373995\n   0.15953287]\n [-0.00096649  0.00075394  0.0038424  ...  0.00186368  0.00318267\n   0.00673919]]\ntorch.Size([2, 160000])\n[[-4.2394055e-03 -1.4405193e-02 -8.7451655e-03 ...  7.3580503e-01\n  -1.9301039e+00 -1.7397377e-01]\n [ 4.3740110e-03 -8.2000187e-03 -1.3182604e-03 ... -2.1635113e+00\n  -2.8108358e+00  1.8098742e-01]]\ntorch.Size([2, 160000])\n[[-0.00089573  0.00074963  0.00384979 ...  0.15814516  0.19274369\n   0.16401312]\n [-0.00089573  0.00074963  0.00384979 ...  0.15814516  0.19274369\n   0.16401312]]\n0.520168\n0.49630898\n--------silent-----------\n15.838672\n8.753023\n--------silent-----------\n0.6448896\n0.6448896\n--------silent-----------\n/kaggle/working/train.py:499: FutureWarning: mir_eval.separation.bss_eval_sources\n\tDeprecated as of mir_eval version 0.8.\n\tIt will be removed in mir_eval version 0.9.\n  sdr, _, _, _ = bss_eval_sources(\ncompute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ntorch.Size([2, 160000])\n[[ 0.          0.          0.         ...  0.16227493  0.19373995\n   0.15953287]\n [-0.00096649  0.00075394  0.0038424  ...  0.00186368  0.00318267\n   0.00673919]]\ntorch.Size([2, 160000])\n[[-4.2394055e-03 -1.4405193e-02 -8.7451655e-03 ...  7.3580503e-01\n  -1.9301039e+00 -1.7397377e-01]\n [ 4.3740110e-03 -8.2000187e-03 -1.3182604e-03 ... -2.1635113e+00\n  -2.8108358e+00  1.8098742e-01]]\ntorch.Size([2, 160000])\n[[-0.00089573  0.00074963  0.00384979 ...  0.15814516  0.19274369\n   0.16401312]\n [-0.00089573  0.00074963  0.00384979 ...  0.15814516  0.19274369\n   0.16401312]]\n0.520168\n0.49630898\n--------silent-----------\n15.838672\n8.753023\n--------silent-----------\n0.6448896\n0.6448896\n--------silent-----------\n/kaggle/working/train.py:499: FutureWarning: mir_eval.separation.bss_eval_sources\n\tDeprecated as of mir_eval version 0.8.\n\tIt will be removed in mir_eval version 0.9.\n  sdr, _, _, _ = bss_eval_sources(\n/kaggle/working/train.py:505: FutureWarning: mir_eval.separation.bss_eval_sources\n\tDeprecated as of mir_eval version 0.8.\n\tIt will be removed in mir_eval version 0.9.\n  sdr_baseline, _, _, _ = bss_eval_sources(\n/kaggle/working/train.py:505: FutureWarning: mir_eval.separation.bss_eval_sources\n\tDeprecated as of mir_eval version 0.8.\n\tIt will be removed in mir_eval version 0.9.\n  sdr_baseline, _, _, _ = bss_eval_sources(\n 68%|█████████████████████████████▎             | 30/44 [03:12<01:35,  6.79s/it]compute_forward 1 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000])\ncompute_forward 1 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000])\ncompute forward 2 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute forward 2 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ntorch.Size([2, 160000])\n[[ 6.88582986e-08 -5.80722553e-06 -2.17003235e-05 ... -6.53805658e-02\n  -9.91955623e-02 -7.55562112e-02]\n [-3.82741609e-06 -2.14614465e-05 -1.35157525e-05 ... -2.00887509e-02\n  -2.25276966e-03  6.36741817e-02]]\ntorch.Size([2, 160000])\n[[ 2.4218110e-05  6.4178657e-06  3.5801546e-05 ...  5.6602275e-01\n   7.8705597e-01  5.5999643e-01]\n [ 2.2784401e-05 -2.2651175e-05  7.5354878e-06 ...  4.4862586e-01\n   5.9660637e-01  2.9453680e-01]]\ntorch.Size([2, 160000])\n[[ 4.4367939e-06 -7.9204456e-06 -1.9461262e-05 ... -8.5311100e-02\n  -1.0370092e-01 -1.2509236e-02]\n [ 4.4367939e-06 -7.9204456e-06 -1.9461262e-05 ... -8.5311100e-02\n  -1.0370092e-01 -1.2509236e-02]]\n0.27192613\n0.17658138\n--------silent-----------\n5.4528356\n5.4737005\n--------silent-----------\n0.31223184\n0.31223184\n--------silent-----------\n/kaggle/working/train.py:499: FutureWarning: mir_eval.separation.bss_eval_sources\n\tDeprecated as of mir_eval version 0.8.\n\tIt will be removed in mir_eval version 0.9.\n  sdr, _, _, _ = bss_eval_sources(\ncompute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ntorch.Size([2, 160000])\n[[ 6.88582986e-08 -5.80722553e-06 -2.17003235e-05 ... -6.53805658e-02\n  -9.91955623e-02 -7.55562112e-02]\n [-3.82741609e-06 -2.14614465e-05 -1.35157525e-05 ... -2.00887509e-02\n  -2.25276966e-03  6.36741817e-02]]\ntorch.Size([2, 160000])\n[[ 2.4218110e-05  6.4178657e-06  3.5801546e-05 ...  5.6602275e-01\n   7.8705597e-01  5.5999643e-01]\n [ 2.2784401e-05 -2.2651175e-05  7.5354878e-06 ...  4.4862586e-01\n   5.9660637e-01  2.9453680e-01]]\ntorch.Size([2, 160000])\n[[ 4.4367939e-06 -7.9204456e-06 -1.9461262e-05 ... -8.5311100e-02\n  -1.0370092e-01 -1.2509236e-02]\n [ 4.4367939e-06 -7.9204456e-06 -1.9461262e-05 ... -8.5311100e-02\n  -1.0370092e-01 -1.2509236e-02]]\n0.27192613\n0.17658138\n--------silent-----------\n5.4528356\n5.4737005\n--------silent-----------\n0.31223184\n0.31223184\n--------silent-----------\n/kaggle/working/train.py:499: FutureWarning: mir_eval.separation.bss_eval_sources\n\tDeprecated as of mir_eval version 0.8.\n\tIt will be removed in mir_eval version 0.9.\n  sdr, _, _, _ = bss_eval_sources(\n/kaggle/working/train.py:505: FutureWarning: mir_eval.separation.bss_eval_sources\n\tDeprecated as of mir_eval version 0.8.\n\tIt will be removed in mir_eval version 0.9.\n  sdr_baseline, _, _, _ = bss_eval_sources(\n/kaggle/working/train.py:505: FutureWarning: mir_eval.separation.bss_eval_sources\n\tDeprecated as of mir_eval version 0.8.\n\tIt will be removed in mir_eval version 0.9.\n  sdr_baseline, _, _, _ = bss_eval_sources(\n 70%|██████████████████████████████▎            | 31/44 [03:18<01:23,  6.39s/it]compute_forward 1 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000])\ncompute forward 2 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute_forward 1 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000])\ncompute forward 2 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ntorch.Size([2, 160000])\n[[-6.4630319e-07  2.5449215e-06  1.5376121e-05 ...  0.0000000e+00\n   0.0000000e+00  0.0000000e+00]\n [ 2.9149312e-03  1.9591529e-02  1.5142409e-02 ... -2.0020576e-03\n  -5.1901275e-03 -1.9596957e-02]]\ntorch.Size([2, 160000])\n[[-0.02061888  0.00178981 -0.03737061 ...  0.07136714  0.03010863\n   0.28870344]\n [-0.00850849 -0.02091275 -0.02741603 ...  0.02777495 -0.08969977\n  -0.04452167]]\ntorch.Size([2, 160000])\n[[ 0.00297971  0.02005706  0.01579877 ... -0.00090806 -0.00548787\n  -0.01987433]\n [ 0.00297971  0.02005706  0.01579877 ... -0.00090806 -0.00548787\n  -0.01987433]]\n6.180293e-05\n0.14562568\n--------silent-----------\n2.3585958\n1.9586391\n--------silent-----------\n0.14553632\n0.14553632\n--------silent-----------\n/kaggle/working/train.py:499: FutureWarning: mir_eval.separation.bss_eval_sources\n\tDeprecated as of mir_eval version 0.8.\n\tIt will be removed in mir_eval version 0.9.\n  sdr, _, _, _ = bss_eval_sources(\ncompute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ntorch.Size([2, 160000])\n[[-6.4630319e-07  2.5449215e-06  1.5376121e-05 ...  0.0000000e+00\n   0.0000000e+00  0.0000000e+00]\n [ 2.9149312e-03  1.9591529e-02  1.5142409e-02 ... -2.0020576e-03\n  -5.1901275e-03 -1.9596957e-02]]\ntorch.Size([2, 160000])\n[[-0.02061888  0.00178981 -0.03737061 ...  0.07136714  0.03010863\n   0.28870344]\n [-0.00850849 -0.02091275 -0.02741603 ...  0.02777495 -0.08969977\n  -0.04452167]]\ntorch.Size([2, 160000])\n[[ 0.00297971  0.02005706  0.01579877 ... -0.00090806 -0.00548787\n  -0.01987433]\n [ 0.00297971  0.02005706  0.01579877 ... -0.00090806 -0.00548787\n  -0.01987433]]\n6.180293e-05\n0.14562568\n--------silent-----------\n2.3585958\n1.9586391\n--------silent-----------\n0.14553632\n0.14553632\n--------silent-----------\n/kaggle/working/train.py:499: FutureWarning: mir_eval.separation.bss_eval_sources\n\tDeprecated as of mir_eval version 0.8.\n\tIt will be removed in mir_eval version 0.9.\n  sdr, _, _, _ = bss_eval_sources(\n/kaggle/working/train.py:505: FutureWarning: mir_eval.separation.bss_eval_sources\n\tDeprecated as of mir_eval version 0.8.\n\tIt will be removed in mir_eval version 0.9.\n  sdr_baseline, _, _, _ = bss_eval_sources(\n/kaggle/working/train.py:505: FutureWarning: mir_eval.separation.bss_eval_sources\n\tDeprecated as of mir_eval version 0.8.\n\tIt will be removed in mir_eval version 0.9.\n  sdr_baseline, _, _, _ = bss_eval_sources(\n 73%|███████████████████████████████▎           | 32/44 [03:27<01:28,  7.34s/it]compute_forward 1 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000])\ncompute forward 2 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute_forward 1 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000])\ncompute forward 2 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ntorch.Size([2, 160000])\n[[ 0.00000000e+00  0.00000000e+00  0.00000000e+00 ...  1.55180278e-05\n   1.40658485e-05  1.76175745e-05]\n [ 0.00000000e+00  0.00000000e+00  0.00000000e+00 ... -3.97654884e-02\n  -3.34166288e-02 -6.51922747e-02]]\ntorch.Size([2, 160000])\n[[0.         0.         0.         ... 0.54830986 0.07904168 0.5934814 ]\n [0.         0.         0.         ... 0.07101777 0.05986123 0.03791144]]\ntorch.Size([2, 160000])\n[[ 0.          0.          0.         ... -0.03903765 -0.0330269\n  -0.06509865]\n [ 0.          0.          0.         ... -0.03903765 -0.0330269\n  -0.06509865]]\n0.15336537\n0.4089287\n--------silent-----------\n10.230515\n3.519314\n--------silent-----------\n0.40434596\n0.40434596\n--------silent-----------\n/kaggle/working/train.py:499: FutureWarning: mir_eval.separation.bss_eval_sources\n\tDeprecated as of mir_eval version 0.8.\n\tIt will be removed in mir_eval version 0.9.\n  sdr, _, _, _ = bss_eval_sources(\ncompute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ntorch.Size([2, 160000])\n[[ 0.00000000e+00  0.00000000e+00  0.00000000e+00 ...  1.55180278e-05\n   1.40658485e-05  1.76175745e-05]\n [ 0.00000000e+00  0.00000000e+00  0.00000000e+00 ... -3.97654884e-02\n  -3.34166288e-02 -6.51922747e-02]]\ntorch.Size([2, 160000])\n[[0.         0.         0.         ... 0.54830986 0.07904168 0.5934814 ]\n [0.         0.         0.         ... 0.07101777 0.05986123 0.03791144]]\ntorch.Size([2, 160000])\n[[ 0.          0.          0.         ... -0.03903765 -0.0330269\n  -0.06509865]\n [ 0.          0.          0.         ... -0.03903765 -0.0330269\n  -0.06509865]]\n0.15336537\n0.4089287\n--------silent-----------\n10.230515\n3.519314\n--------silent-----------\n0.40434596\n0.40434596\n--------silent-----------\n/kaggle/working/train.py:499: FutureWarning: mir_eval.separation.bss_eval_sources\n\tDeprecated as of mir_eval version 0.8.\n\tIt will be removed in mir_eval version 0.9.\n  sdr, _, _, _ = bss_eval_sources(\n/kaggle/working/train.py:505: FutureWarning: mir_eval.separation.bss_eval_sources\n\tDeprecated as of mir_eval version 0.8.\n\tIt will be removed in mir_eval version 0.9.\n  sdr_baseline, _, _, _ = bss_eval_sources(\n/kaggle/working/train.py:505: FutureWarning: mir_eval.separation.bss_eval_sources\n\tDeprecated as of mir_eval version 0.8.\n\tIt will be removed in mir_eval version 0.9.\n  sdr_baseline, _, _, _ = bss_eval_sources(\n 75%|████████████████████████████████▎          | 33/44 [03:34<01:19,  7.20s/it]compute_forward 1 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000])\ncompute forward 2 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute_forward 1 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000])\ncompute forward 2 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ntorch.Size([2, 160000])\n[[ 0.          0.          0.         ...  0.0046852   0.00385279\n   0.00399311]\n [-0.00764389 -0.0166636  -0.01579237 ...  0.01334362 -0.01251713\n  -0.00031352]]\ntorch.Size([2, 160000])\n[[ 0.02294006  0.0033822   0.05503738 ... -0.36460787 -0.44346055\n  -0.36584508]\n [ 0.0023174  -0.00270119  0.003544   ... -0.21436743 -0.05759868\n  -0.084495  ]]\ntorch.Size([2, 160000])\n[[-0.00764389 -0.0166636  -0.01579237 ...  0.01723809 -0.00582071\n   0.00140024]\n [-0.00764389 -0.0166636  -0.01579237 ...  0.01723809 -0.00582071\n   0.00140024]]\n0.2855954\n0.45058337\n--------silent-----------\n11.52287\n9.091218\n--------silent-----------\n0.591672\n0.591672\n--------silent-----------\n/kaggle/working/train.py:499: FutureWarning: mir_eval.separation.bss_eval_sources\n\tDeprecated as of mir_eval version 0.8.\n\tIt will be removed in mir_eval version 0.9.\n  sdr, _, _, _ = bss_eval_sources(\ncompute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ntorch.Size([2, 160000])\n[[ 0.          0.          0.         ...  0.0046852   0.00385279\n   0.00399311]\n [-0.00764389 -0.0166636  -0.01579237 ...  0.01334362 -0.01251713\n  -0.00031352]]\ntorch.Size([2, 160000])\n[[ 0.02294006  0.0033822   0.05503738 ... -0.36460787 -0.44346055\n  -0.36584508]\n [ 0.0023174  -0.00270119  0.003544   ... -0.21436743 -0.05759868\n  -0.084495  ]]\ntorch.Size([2, 160000])\n[[-0.00764389 -0.0166636  -0.01579237 ...  0.01723809 -0.00582071\n   0.00140024]\n [-0.00764389 -0.0166636  -0.01579237 ...  0.01723809 -0.00582071\n   0.00140024]]\n0.2855954\n0.45058337\n--------silent-----------\n11.52287\n9.091218\n--------silent-----------\n0.591672\n0.591672\n--------silent-----------\n/kaggle/working/train.py:499: FutureWarning: mir_eval.separation.bss_eval_sources\n\tDeprecated as of mir_eval version 0.8.\n\tIt will be removed in mir_eval version 0.9.\n  sdr, _, _, _ = bss_eval_sources(\n/kaggle/working/train.py:505: FutureWarning: mir_eval.separation.bss_eval_sources\n\tDeprecated as of mir_eval version 0.8.\n\tIt will be removed in mir_eval version 0.9.\n  sdr_baseline, _, _, _ = bss_eval_sources(\n/kaggle/working/train.py:505: FutureWarning: mir_eval.separation.bss_eval_sources\n\tDeprecated as of mir_eval version 0.8.\n\tIt will be removed in mir_eval version 0.9.\n  sdr_baseline, _, _, _ = bss_eval_sources(\n 77%|█████████████████████████████████▏         | 34/44 [03:42<01:14,  7.42s/it]compute_forward 1 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000])\ncompute forward 2 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute_forward 1 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000])\ncompute forward 2 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ntorch.Size([2, 160000])\n[[-4.8379352e-05 -1.2447451e-04 -1.2018140e-04 ... -1.2392714e-04\n  -1.1795492e-04 -1.3175991e-04]\n [-2.3313357e-04 -4.6184930e-04 -4.1176635e-04 ... -9.0075424e-05\n   5.0724149e-03  1.0975462e-02]]\ntorch.Size([2, 160000])\n[[ 8.2335551e-04  2.7531170e-04  1.5474956e-03 ...  2.9601052e-01\n  -3.3125557e-02  1.4794600e-02]\n [ 2.8226530e-04  4.2280048e-05  3.0113303e-04 ... -1.2577917e-01\n  -2.0214203e-01 -1.9035833e-02]]\ntorch.Size([2, 160000])\n[[-2.9294915e-04 -5.1997608e-04 -4.5866048e-04 ... -1.3182405e-05\n   5.0578793e-03  1.0804448e-02]\n [-2.9294915e-04 -5.1997608e-04 -4.5866048e-04 ... -1.3182405e-05\n   5.0578793e-03  1.0804448e-02]]\n0.00014437141\n0.10136929\n--------silent-----------\n1.6652408\n1.922993\n--------silent-----------\n0.101442605\n0.101442605\n--------silent-----------\n/kaggle/working/train.py:499: FutureWarning: mir_eval.separation.bss_eval_sources\n\tDeprecated as of mir_eval version 0.8.\n\tIt will be removed in mir_eval version 0.9.\n  sdr, _, _, _ = bss_eval_sources(\ncompute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ntorch.Size([2, 160000])\n[[-4.8379352e-05 -1.2447451e-04 -1.2018140e-04 ... -1.2392714e-04\n  -1.1795492e-04 -1.3175991e-04]\n [-2.3313357e-04 -4.6184930e-04 -4.1176635e-04 ... -9.0075424e-05\n   5.0724149e-03  1.0975462e-02]]\ntorch.Size([2, 160000])\n[[ 8.2335551e-04  2.7531170e-04  1.5474956e-03 ...  2.9601052e-01\n  -3.3125557e-02  1.4794600e-02]\n [ 2.8226530e-04  4.2280048e-05  3.0113303e-04 ... -1.2577917e-01\n  -2.0214203e-01 -1.9035833e-02]]\ntorch.Size([2, 160000])\n[[-2.9294915e-04 -5.1997608e-04 -4.5866048e-04 ... -1.3182405e-05\n   5.0578793e-03  1.0804448e-02]\n [-2.9294915e-04 -5.1997608e-04 -4.5866048e-04 ... -1.3182405e-05\n   5.0578793e-03  1.0804448e-02]]\n0.00014437141\n0.10136929\n--------silent-----------\n1.6652408\n1.922993\n--------silent-----------\n0.101442605\n0.101442605\n--------silent-----------\n/kaggle/working/train.py:499: FutureWarning: mir_eval.separation.bss_eval_sources\n\tDeprecated as of mir_eval version 0.8.\n\tIt will be removed in mir_eval version 0.9.\n  sdr, _, _, _ = bss_eval_sources(\n/kaggle/working/train.py:505: FutureWarning: mir_eval.separation.bss_eval_sources\n\tDeprecated as of mir_eval version 0.8.\n\tIt will be removed in mir_eval version 0.9.\n  sdr_baseline, _, _, _ = bss_eval_sources(\n/kaggle/working/train.py:505: FutureWarning: mir_eval.separation.bss_eval_sources\n\tDeprecated as of mir_eval version 0.8.\n\tIt will be removed in mir_eval version 0.9.\n  sdr_baseline, _, _, _ = bss_eval_sources(\n 80%|██████████████████████████████████▏        | 35/44 [03:51<01:10,  7.82s/it]compute_forward 1 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000])\ncompute forward 2 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute_forward 1 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000])\ncompute forward 2 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ntorch.Size([2, 160000])\n[[-3.32153746e-07 -5.35534491e-06 -8.07473953e-06 ... -1.28672182e-05\n  -1.50488668e-05 -1.35031532e-05]\n [-1.03656475e-05 -1.76416324e-05 -1.55681955e-05 ... -1.93533022e-02\n   5.84111437e-02  7.92050809e-02]]\ntorch.Size([2, 160000])\n[[ 1.6665706e-05  9.2074833e-06  4.5474655e-05 ...  2.2632180e-02\n  -4.1915256e-01 -4.2469922e-01]\n [ 6.7588117e-06 -4.0972200e-06  4.4954886e-06 ...  5.3981948e-01\n  -4.1292021e-01 -4.7219002e-01]]\ntorch.Size([2, 160000])\n[[-6.3061698e-06 -1.3965353e-05 -1.1569315e-05 ... -1.9337110e-02\n   5.8433667e-02  7.9226486e-02]\n [-6.3061698e-06 -1.3965353e-05 -1.1569315e-05 ... -1.9337110e-02\n   5.8433667e-02  7.9226486e-02]]\n2.9080464e-05\n0.2732369\n--------silent-----------\n4.172896\n4.428727\n--------silent-----------\n0.2732071\n0.2732071\n--------silent-----------\n/kaggle/working/train.py:499: FutureWarning: mir_eval.separation.bss_eval_sources\n\tDeprecated as of mir_eval version 0.8.\n\tIt will be removed in mir_eval version 0.9.\n  sdr, _, _, _ = bss_eval_sources(\ncompute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ntorch.Size([2, 160000])\n[[-3.32153746e-07 -5.35534491e-06 -8.07473953e-06 ... -1.28672182e-05\n  -1.50488668e-05 -1.35031532e-05]\n [-1.03656475e-05 -1.76416324e-05 -1.55681955e-05 ... -1.93533022e-02\n   5.84111437e-02  7.92050809e-02]]\ntorch.Size([2, 160000])\n[[ 1.6665706e-05  9.2074833e-06  4.5474655e-05 ...  2.2632180e-02\n  -4.1915256e-01 -4.2469922e-01]\n [ 6.7588117e-06 -4.0972200e-06  4.4954886e-06 ...  5.3981948e-01\n  -4.1292021e-01 -4.7219002e-01]]\ntorch.Size([2, 160000])\n[[-6.3061698e-06 -1.3965353e-05 -1.1569315e-05 ... -1.9337110e-02\n   5.8433667e-02  7.9226486e-02]\n [-6.3061698e-06 -1.3965353e-05 -1.1569315e-05 ... -1.9337110e-02\n   5.8433667e-02  7.9226486e-02]]\n2.9080464e-05\n0.2732369\n--------silent-----------\n4.172896\n4.428727\n--------silent-----------\n0.2732071\n0.2732071\n--------silent-----------\n/kaggle/working/train.py:499: FutureWarning: mir_eval.separation.bss_eval_sources\n\tDeprecated as of mir_eval version 0.8.\n\tIt will be removed in mir_eval version 0.9.\n  sdr, _, _, _ = bss_eval_sources(\n/kaggle/working/train.py:505: FutureWarning: mir_eval.separation.bss_eval_sources\n\tDeprecated as of mir_eval version 0.8.\n\tIt will be removed in mir_eval version 0.9.\n  sdr_baseline, _, _, _ = bss_eval_sources(\n/kaggle/working/train.py:505: FutureWarning: mir_eval.separation.bss_eval_sources\n\tDeprecated as of mir_eval version 0.8.\n\tIt will be removed in mir_eval version 0.9.\n  sdr_baseline, _, _, _ = bss_eval_sources(\n 82%|███████████████████████████████████▏       | 36/44 [03:58<01:00,  7.53s/it]compute_forward 1 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000])\ncompute forward 2 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute_forward 1 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000])\ncompute forward 2 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ntorch.Size([2, 160000])\n[[ 0.0000000e+00  0.0000000e+00  0.0000000e+00 ... -3.2612318e-03\n  -7.0207869e-04 -4.2038065e-04]\n [-2.0998026e-05 -6.2310748e-05 -6.0217302e-05 ... -1.0918805e-01\n  -5.3245716e-02 -1.1419926e-01]]\ntorch.Size([2, 160000])\n[[ 9.5322212e-05  4.0135332e-05  1.9845225e-04 ...  1.0224562e+00\n   3.0853453e-01  1.3518366e+00]\n [ 2.7648330e-05 -5.1405605e-06  3.5071742e-05 ...  5.9463894e-01\n   4.6883923e-01  3.1258187e-01]]\ntorch.Size([2, 160000])\n[[-2.0998026e-05 -6.2310748e-05 -6.0217302e-05 ... -1.1310159e-01\n  -5.4392103e-02 -1.1426787e-01]\n [-2.0998026e-05 -6.2310748e-05 -6.0217302e-05 ... -1.1310159e-01\n  -5.4392103e-02 -1.1426787e-01]]\n0.024701124\n0.6480063\n--------silent-----------\n15.557106\n7.6106253\n--------silent-----------\n0.64289343\n0.64289343\n--------silent-----------\n/kaggle/working/train.py:499: FutureWarning: mir_eval.separation.bss_eval_sources\n\tDeprecated as of mir_eval version 0.8.\n\tIt will be removed in mir_eval version 0.9.\n  sdr, _, _, _ = bss_eval_sources(\ncompute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ntorch.Size([2, 160000])\n[[ 0.0000000e+00  0.0000000e+00  0.0000000e+00 ... -3.2612318e-03\n  -7.0207869e-04 -4.2038065e-04]\n [-2.0998026e-05 -6.2310748e-05 -6.0217302e-05 ... -1.0918805e-01\n  -5.3245716e-02 -1.1419926e-01]]\ntorch.Size([2, 160000])\n[[ 9.5322212e-05  4.0135332e-05  1.9845225e-04 ...  1.0224562e+00\n   3.0853453e-01  1.3518366e+00]\n [ 2.7648330e-05 -5.1405605e-06  3.5071742e-05 ...  5.9463894e-01\n   4.6883923e-01  3.1258187e-01]]\ntorch.Size([2, 160000])\n[[-2.0998026e-05 -6.2310748e-05 -6.0217302e-05 ... -1.1310159e-01\n  -5.4392103e-02 -1.1426787e-01]\n [-2.0998026e-05 -6.2310748e-05 -6.0217302e-05 ... -1.1310159e-01\n  -5.4392103e-02 -1.1426787e-01]]\n0.024701124\n0.6480063\n--------silent-----------\n15.557106\n7.6106253\n--------silent-----------\n0.64289343\n0.64289343\n--------silent-----------\n/kaggle/working/train.py:499: FutureWarning: mir_eval.separation.bss_eval_sources\n\tDeprecated as of mir_eval version 0.8.\n\tIt will be removed in mir_eval version 0.9.\n  sdr, _, _, _ = bss_eval_sources(\n/kaggle/working/train.py:505: FutureWarning: mir_eval.separation.bss_eval_sources\n\tDeprecated as of mir_eval version 0.8.\n\tIt will be removed in mir_eval version 0.9.\n  sdr_baseline, _, _, _ = bss_eval_sources(\n/kaggle/working/train.py:505: FutureWarning: mir_eval.separation.bss_eval_sources\n\tDeprecated as of mir_eval version 0.8.\n\tIt will be removed in mir_eval version 0.9.\n  sdr_baseline, _, _, _ = bss_eval_sources(\n 84%|████████████████████████████████████▏      | 37/44 [04:05<00:51,  7.35s/it]compute_forward 1 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000])\ncompute forward 2 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute_forward 1 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000])\ncompute forward 2 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ntorch.Size([2, 160000])\n[[ 0.0000000e+00  0.0000000e+00  0.0000000e+00 ...  0.0000000e+00\n   0.0000000e+00  0.0000000e+00]\n [ 5.6337367e-06 -2.4315068e-06 -3.0179668e-05 ...  6.9676436e-02\n   6.6121183e-02  7.0002899e-02]]\ntorch.Size([2, 160000])\n[[ 3.98080556e-06 -1.36137705e-05  5.08671183e-05 ... -7.62482703e-01\n  -7.66249895e-01 -7.26184905e-01]\n [-8.99981023e-06  3.29411637e-06  1.57181803e-05 ... -1.55163735e-01\n  -2.53261298e-01 -2.31829017e-01]]\ntorch.Size([2, 160000])\n[[ 5.6337367e-06 -2.4315068e-06 -3.0179668e-05 ...  6.9153979e-02\n   6.5890081e-02  7.0143282e-02]\n [ 5.6337367e-06 -2.4315068e-06 -3.0179668e-05 ...  6.9153979e-02\n   6.5890081e-02  7.0143282e-02]]\n0.0\n0.2081564\n--------silent-----------\n 86%|█████████████████████████████████████▏     | 38/44 [04:11<00:41,  6.97s/it]compute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ntorch.Size([2, 160000])\n[[ 0.0000000e+00  0.0000000e+00  0.0000000e+00 ...  0.0000000e+00\n   0.0000000e+00  0.0000000e+00]\n [ 5.6337367e-06 -2.4315068e-06 -3.0179668e-05 ...  6.9676436e-02\n   6.6121183e-02  7.0002899e-02]]\ntorch.Size([2, 160000])\n[[ 3.98080556e-06 -1.36137705e-05  5.08671183e-05 ... -7.62482703e-01\n  -7.66249895e-01 -7.26184905e-01]\n [-8.99981023e-06  3.29411637e-06  1.57181803e-05 ... -1.55163735e-01\n  -2.53261298e-01 -2.31829017e-01]]\ntorch.Size([2, 160000])\n[[ 5.6337367e-06 -2.4315068e-06 -3.0179668e-05 ...  6.9153979e-02\n   6.5890081e-02  7.0143282e-02]\n [ 5.6337367e-06 -2.4315068e-06 -3.0179668e-05 ...  6.9153979e-02\n   6.5890081e-02  7.0143282e-02]]\n0.0\n0.2081564\n--------silent-----------\n 86%|█████████████████████████████████████▏     | 38/44 [04:11<00:42,  7.02s/it]compute_forward 1 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000])\ncompute forward 2 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute_forward 1 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000])\ncompute forward 2 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ntorch.Size([2, 160000])\n[[ 0.          0.          0.         ... -0.03467166 -0.01066568\n   0.01026174]\n [ 0.00033582 -0.00192192 -0.00121979 ...  0.00259416  0.00414867\n   0.00725449]]\ntorch.Size([2, 160000])\n[[-5.0663110e-04 -9.5010293e-04 -1.2840760e-04 ...  4.5295423e-01\n   1.9803707e-01  2.2474836e-01]\n [-6.1170873e-04  4.7741338e-05  6.6970120e-04 ...  4.9677029e-02\n   7.3170640e-02  9.5639948e-04]]\ntorch.Size([2, 160000])\n[[ 0.00033582 -0.00192192 -0.00121979 ... -0.03280426 -0.008231\n   0.01607042]\n [ 0.00033582 -0.00192192 -0.00121979 ... -0.03280426 -0.008231\n   0.01607042]]\n0.2414692\n0.42786384\n--------silent-----------\n11.215969\n6.054429\n--------silent-----------\n0.4287307\n0.4287307\n--------silent-----------\n/kaggle/working/train.py:499: FutureWarning: mir_eval.separation.bss_eval_sources\n\tDeprecated as of mir_eval version 0.8.\n\tIt will be removed in mir_eval version 0.9.\n  sdr, _, _, _ = bss_eval_sources(\ncompute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ntorch.Size([2, 160000])\n[[ 0.          0.          0.         ... -0.03467166 -0.01066568\n   0.01026174]\n [ 0.00033582 -0.00192192 -0.00121979 ...  0.00259416  0.00414867\n   0.00725449]]\ntorch.Size([2, 160000])\n[[-5.0663110e-04 -9.5010293e-04 -1.2840760e-04 ...  4.5295423e-01\n   1.9803707e-01  2.2474836e-01]\n [-6.1170873e-04  4.7741338e-05  6.6970120e-04 ...  4.9677029e-02\n   7.3170640e-02  9.5639948e-04]]\ntorch.Size([2, 160000])\n[[ 0.00033582 -0.00192192 -0.00121979 ... -0.03280426 -0.008231\n   0.01607042]\n [ 0.00033582 -0.00192192 -0.00121979 ... -0.03280426 -0.008231\n   0.01607042]]\n0.2414692\n0.42786384\n--------silent-----------\n11.215969\n6.054429\n--------silent-----------\n0.4287307\n0.4287307\n--------silent-----------\n/kaggle/working/train.py:499: FutureWarning: mir_eval.separation.bss_eval_sources\n\tDeprecated as of mir_eval version 0.8.\n\tIt will be removed in mir_eval version 0.9.\n  sdr, _, _, _ = bss_eval_sources(\n/kaggle/working/train.py:505: FutureWarning: mir_eval.separation.bss_eval_sources\n\tDeprecated as of mir_eval version 0.8.\n\tIt will be removed in mir_eval version 0.9.\n  sdr_baseline, _, _, _ = bss_eval_sources(\n/kaggle/working/train.py:505: FutureWarning: mir_eval.separation.bss_eval_sources\n\tDeprecated as of mir_eval version 0.8.\n\tIt will be removed in mir_eval version 0.9.\n  sdr_baseline, _, _, _ = bss_eval_sources(\n 89%|██████████████████████████████████████     | 39/44 [04:19<00:37,  7.41s/it]compute_forward 1 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000])\ncompute forward 2 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute_forward 1 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000])\ncompute forward 2 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ntorch.Size([2, 160000])\n[[-6.86506508e-04 -1.35622197e-03 -9.92718153e-04 ...  9.70236957e-04\n  -1.30436355e-02 -4.11568675e-03]\n [ 2.38854955e-05 -3.51660710e-05 -1.62900018e-04 ... -2.30695568e-02\n  -5.45430891e-02  4.88416851e-02]]\ntorch.Size([2, 160000])\n[[ 2.0269561e-03  7.9628476e-04  3.5693869e-03 ...  1.5952395e+00\n   3.3329174e-01  5.3955513e-01]\n [ 7.3621870e-04  2.0896434e-04  8.0522377e-04 ...  4.3869916e-01\n  -1.1511639e-01 -2.6323482e-01]]\ntorch.Size([2, 160000])\n[[-0.00065351 -0.00136577 -0.00109266 ... -0.02380554 -0.06836404\n   0.0444264 ]\n [-0.00065351 -0.00136577 -0.00109266 ... -0.02380554 -0.06836404\n   0.0444264 ]]\n0.37524462\n0.50020283\n--------silent-----------\n13.018999\n4.856157\n--------silent-----------\n0.6025619\n0.6025619\n--------silent-----------\n/kaggle/working/train.py:499: FutureWarning: mir_eval.separation.bss_eval_sources\n\tDeprecated as of mir_eval version 0.8.\n\tIt will be removed in mir_eval version 0.9.\n  sdr, _, _, _ = bss_eval_sources(\ncompute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ntorch.Size([2, 160000])\n[[-6.86506508e-04 -1.35622197e-03 -9.92718153e-04 ...  9.70236957e-04\n  -1.30436355e-02 -4.11568675e-03]\n [ 2.38854955e-05 -3.51660710e-05 -1.62900018e-04 ... -2.30695568e-02\n  -5.45430891e-02  4.88416851e-02]]\ntorch.Size([2, 160000])\n[[ 2.0269561e-03  7.9628476e-04  3.5693869e-03 ...  1.5952395e+00\n   3.3329174e-01  5.3955513e-01]\n [ 7.3621870e-04  2.0896434e-04  8.0522377e-04 ...  4.3869916e-01\n  -1.1511639e-01 -2.6323482e-01]]\ntorch.Size([2, 160000])\n[[-0.00065351 -0.00136577 -0.00109266 ... -0.02380554 -0.06836404\n   0.0444264 ]\n [-0.00065351 -0.00136577 -0.00109266 ... -0.02380554 -0.06836404\n   0.0444264 ]]\n0.37524462\n0.50020283\n--------silent-----------\n13.018999\n4.856157\n--------silent-----------\n0.6025619\n0.6025619\n--------silent-----------\n/kaggle/working/train.py:499: FutureWarning: mir_eval.separation.bss_eval_sources\n\tDeprecated as of mir_eval version 0.8.\n\tIt will be removed in mir_eval version 0.9.\n  sdr, _, _, _ = bss_eval_sources(\n/kaggle/working/train.py:505: FutureWarning: mir_eval.separation.bss_eval_sources\n\tDeprecated as of mir_eval version 0.8.\n\tIt will be removed in mir_eval version 0.9.\n  sdr_baseline, _, _, _ = bss_eval_sources(\n/kaggle/working/train.py:505: FutureWarning: mir_eval.separation.bss_eval_sources\n\tDeprecated as of mir_eval version 0.8.\n\tIt will be removed in mir_eval version 0.9.\n  sdr_baseline, _, _, _ = bss_eval_sources(\n 91%|███████████████████████████████████████    | 40/44 [04:27<00:29,  7.34s/it]compute_forward 1 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000])\ncompute forward 2 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute_forward 1 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000])\ncompute forward 2 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ntorch.Size([2, 160000])\n[[ 0.0000000e+00  0.0000000e+00  0.0000000e+00 ...  3.4329318e-02\n  -8.1835790e-03 -1.0084818e-01]\n [-7.5457829e-06 -3.3645611e-05 -4.2421532e-05 ...  3.0992638e-02\n   3.4563184e-02  4.3714870e-02]]\ntorch.Size([2, 160000])\n[[ 3.17428858e-05 -3.93937662e-05  1.43751754e-06 ... -2.85502255e-01\n  -5.71581542e-01  3.50547314e-01]\n [ 2.56066360e-05  1.20937766e-05  1.04721585e-05 ... -5.83350658e-01\n  -2.23132193e-01  3.22583795e-01]]\ntorch.Size([2, 160000])\n[[-7.5457829e-06 -3.3645611e-05 -4.2421532e-05 ...  6.3800476e-02\n   2.4479490e-02 -5.8135696e-02]\n [-7.5457829e-06 -3.3645611e-05 -4.2421532e-05 ...  6.3800476e-02\n   2.4479490e-02 -5.8135696e-02]]\n0.17950013\n0.14781591\n--------silent-----------\n6.307358\n4.3397965\n--------silent-----------\n0.3041501\n0.3041501\n--------silent-----------\n/kaggle/working/train.py:499: FutureWarning: mir_eval.separation.bss_eval_sources\n\tDeprecated as of mir_eval version 0.8.\n\tIt will be removed in mir_eval version 0.9.\n  sdr, _, _, _ = bss_eval_sources(\ncompute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ntorch.Size([2, 160000])\n[[ 0.0000000e+00  0.0000000e+00  0.0000000e+00 ...  3.4329318e-02\n  -8.1835790e-03 -1.0084818e-01]\n [-7.5457829e-06 -3.3645611e-05 -4.2421532e-05 ...  3.0992638e-02\n   3.4563184e-02  4.3714870e-02]]\ntorch.Size([2, 160000])\n[[ 3.17428858e-05 -3.93937662e-05  1.43751754e-06 ... -2.85502255e-01\n  -5.71581542e-01  3.50547314e-01]\n [ 2.56066360e-05  1.20937766e-05  1.04721585e-05 ... -5.83350658e-01\n  -2.23132193e-01  3.22583795e-01]]\ntorch.Size([2, 160000])\n[[-7.5457829e-06 -3.3645611e-05 -4.2421532e-05 ...  6.3800476e-02\n   2.4479490e-02 -5.8135696e-02]\n [-7.5457829e-06 -3.3645611e-05 -4.2421532e-05 ...  6.3800476e-02\n   2.4479490e-02 -5.8135696e-02]]\n0.17950013\n0.14781591\n--------silent-----------\n6.307358\n4.3397965\n--------silent-----------\n0.3041501\n0.3041501\n--------silent-----------\n/kaggle/working/train.py:499: FutureWarning: mir_eval.separation.bss_eval_sources\n\tDeprecated as of mir_eval version 0.8.\n\tIt will be removed in mir_eval version 0.9.\n  sdr, _, _, _ = bss_eval_sources(\n/kaggle/working/train.py:505: FutureWarning: mir_eval.separation.bss_eval_sources\n\tDeprecated as of mir_eval version 0.8.\n\tIt will be removed in mir_eval version 0.9.\n  sdr_baseline, _, _, _ = bss_eval_sources(\n/kaggle/working/train.py:505: FutureWarning: mir_eval.separation.bss_eval_sources\n\tDeprecated as of mir_eval version 0.8.\n\tIt will be removed in mir_eval version 0.9.\n  sdr_baseline, _, _, _ = bss_eval_sources(\n 93%|████████████████████████████████████████   | 41/44 [04:32<00:20,  6.80s/it]compute_forward 1 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000])\ncompute forward 2 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute_forward 1 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000])\ncompute forward 2 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ntorch.Size([2, 160000])\n[[ 0.          0.          0.         ...  0.          0.\n   0.        ]\n [ 0.0054289   0.00757991  0.00587145 ...  0.00928936 -0.01708193\n  -0.00513126]]\ntorch.Size([2, 160000])\n[[-0.01993749 -0.02909532  0.01274068 ... -0.08041666  0.08694851\n   0.11415702]\n [-0.00155365 -0.02447075 -0.01822953 ... -0.06384987 -0.02387656\n   0.00366285]]\ntorch.Size([2, 160000])\n[[ 0.0054289   0.00757991  0.00587145 ...  0.00974716 -0.01678472\n  -0.00550892]\n [ 0.0054289   0.00757991  0.00587145 ...  0.00974716 -0.01678472\n  -0.00550892]]\n0.26823652\n0.5612855\n--------silent-----------\n12.054707\n5.580122\n--------silent-----------\n0.5557791\n0.5557791\n--------silent-----------\n/kaggle/working/train.py:499: FutureWarning: mir_eval.separation.bss_eval_sources\n\tDeprecated as of mir_eval version 0.8.\n\tIt will be removed in mir_eval version 0.9.\n  sdr, _, _, _ = bss_eval_sources(\ncompute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ntorch.Size([2, 160000])\n[[ 0.          0.          0.         ...  0.          0.\n   0.        ]\n [ 0.0054289   0.00757991  0.00587145 ...  0.00928936 -0.01708193\n  -0.00513126]]\ntorch.Size([2, 160000])\n[[-0.01993749 -0.02909532  0.01274068 ... -0.08041666  0.08694851\n   0.11415702]\n [-0.00155365 -0.02447075 -0.01822953 ... -0.06384987 -0.02387656\n   0.00366285]]\ntorch.Size([2, 160000])\n[[ 0.0054289   0.00757991  0.00587145 ...  0.00974716 -0.01678472\n  -0.00550892]\n [ 0.0054289   0.00757991  0.00587145 ...  0.00974716 -0.01678472\n  -0.00550892]]\n0.26823652\n0.5612855\n--------silent-----------\n12.054707\n5.580122\n--------silent-----------\n0.5557791\n0.5557791\n--------silent-----------\n/kaggle/working/train.py:499: FutureWarning: mir_eval.separation.bss_eval_sources\n\tDeprecated as of mir_eval version 0.8.\n\tIt will be removed in mir_eval version 0.9.\n  sdr, _, _, _ = bss_eval_sources(\n/kaggle/working/train.py:505: FutureWarning: mir_eval.separation.bss_eval_sources\n\tDeprecated as of mir_eval version 0.8.\n\tIt will be removed in mir_eval version 0.9.\n  sdr_baseline, _, _, _ = bss_eval_sources(\n/kaggle/working/train.py:505: FutureWarning: mir_eval.separation.bss_eval_sources\n\tDeprecated as of mir_eval version 0.8.\n\tIt will be removed in mir_eval version 0.9.\n  sdr_baseline, _, _, _ = bss_eval_sources(\n 95%|█████████████████████████████████████████  | 42/44 [04:39<00:13,  6.78s/it]compute_forward 1 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000])\ncompute forward 2 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute_forward 1 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000])\ncompute forward 2 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ntorch.Size([2, 160000])\n[[0.         0.         0.         ... 0.         0.         0.        ]\n [0.         0.         0.         ... 0.03266658 0.01797898 0.06852969]]\ntorch.Size([2, 160000])\n[[ 0.          0.          0.         ... -0.486419    0.13459927\n  -0.16182236]\n [ 0.          0.          0.         ... -0.30222228 -0.23351724\n  -0.20019534]]\ntorch.Size([2, 160000])\n[[0.         0.         0.         ... 0.03094936 0.01698606 0.0683936 ]\n [0.         0.         0.         ... 0.03094936 0.01698606 0.0683936 ]]\n0.0\n0.65650594\n--------silent-----------\n 98%|██████████████████████████████████████████ | 43/44 [04:44<00:06,  6.36s/it]compute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ntorch.Size([2, 160000])\n[[0.         0.         0.         ... 0.         0.         0.        ]\n [0.         0.         0.         ... 0.03266658 0.01797898 0.06852969]]\ntorch.Size([2, 160000])\n[[ 0.          0.          0.         ... -0.486419    0.13459927\n  -0.16182236]\n [ 0.          0.          0.         ... -0.30222228 -0.23351724\n  -0.20019534]]\ntorch.Size([2, 160000])\n[[0.         0.         0.         ... 0.03094936 0.01698606 0.0683936 ]\n [0.         0.         0.         ... 0.03094936 0.01698606 0.0683936 ]]\n0.0\n0.65650594\n--------silent-----------\n 98%|██████████████████████████████████████████ | 43/44 [04:44<00:06,  6.36s/it]compute_forward 1 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000])\ncompute forward 2 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute_forward 1 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000])\ncompute forward 2 \ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ncompute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ntorch.Size([2, 160000])\n[[ 0.0000000e+00  0.0000000e+00  0.0000000e+00 ...  0.0000000e+00\n   0.0000000e+00  0.0000000e+00]\n [ 2.2670829e-03  7.8875688e-05 -4.3425784e-03 ...  6.8385907e-02\n   6.1077695e-02  1.5557414e-01]]\ntorch.Size([2, 160000])\n[[ 5.2191527e-03 -1.5105030e-03  1.3593936e-02 ... -7.9294258e-01\n  -8.2872760e-01 -7.0691931e-01]\n [-7.0126355e-04 -1.0578580e-02  7.7416697e-03 ... -1.6123617e-01\n  -3.6919922e-01 -2.6600508e-03]]\ntorch.Size([2, 160000])\n[[ 2.2670829e-03  7.8875688e-05 -4.3425784e-03 ...  6.5117955e-02\n   6.4148903e-02  1.5530725e-01]\n [ 2.2670829e-03  7.8875688e-05 -4.3425784e-03 ...  6.5117955e-02\n   6.4148903e-02  1.5530725e-01]]\n0.0\n0.6135302\n--------silent-----------\n100%|███████████████████████████████████████████| 44/44 [04:50<00:00,  6.61s/it]\nWarning: skipping silent target, this has happened 1 times\ncompute obj\ntorch.Size([1, 160000, 2])\ntorch.Size([1, 160000, 2])\ntorch.Size([2, 160000])\n[[ 0.0000000e+00  0.0000000e+00  0.0000000e+00 ...  0.0000000e+00\n   0.0000000e+00  0.0000000e+00]\n [ 2.2670829e-03  7.8875688e-05 -4.3425784e-03 ...  6.8385907e-02\n   6.1077695e-02  1.5557414e-01]]\ntorch.Size([2, 160000])\n[[ 5.2191527e-03 -1.5105030e-03  1.3593936e-02 ... -7.9294258e-01\n  -8.2872760e-01 -7.0691931e-01]\n [-7.0126355e-04 -1.0578580e-02  7.7416697e-03 ... -1.6123617e-01\n  -3.6919922e-01 -2.6600508e-03]]\ntorch.Size([2, 160000])\n[[ 2.2670829e-03  7.8875688e-05 -4.3425784e-03 ...  6.5117955e-02\n   6.4148903e-02  1.5530725e-01]\n [ 2.2670829e-03  7.8875688e-05 -4.3425784e-03 ...  6.5117955e-02\n   6.4148903e-02  1.5530725e-01]]\n0.0\n0.6135302\n--------silent-----------\n100%|███████████████████████████████████████████| 44/44 [04:50<00:00,  6.61s/it]\nWarning: skipping silent target, this has happened 1 times\n__main__ - Mean SISNR is -5.30053364833196\n__main__ - Mean SISNRi is -2.185913928349813\n__main__ - Mean SDR is -7.5567574962370205\n__main__ - Mean SDRi is -8.178458120633705\n[rank0]:[W410 02:00:35.400550446 ProcessGroupNCCL.cpp:1250] Warning: WARNING: process group has NOT been destroyed before we destruct ProcessGroupNCCL. On normal program exit, the application should call destroy_process_group to ensure that any pending NCCL operations have finished in this process. In rare cases this process can exit before this point and block the progress of another member of the process group. This constraint has always been present,  but this warning has only been added since PyTorch 2.4 (function operator())\n","output_type":"stream"}],"execution_count":23},{"cell_type":"code","source":"!zip -r convtasnet_rebuild_e3_sisnr_complete.zip /kaggle/working/results/convtasnet/","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-10T02:06:49.928300Z","iopub.execute_input":"2025-04-10T02:06:49.928617Z","iopub.status.idle":"2025-04-10T02:06:54.118505Z","shell.execute_reply.started":"2025-04-10T02:06:49.928592Z","shell.execute_reply":"2025-04-10T02:06:54.117320Z"}},"outputs":[{"name":"stdout","text":"  adding: kaggle/working/results/convtasnet/ (stored 0%)\n  adding: kaggle/working/results/convtasnet/1234/ (stored 0%)\n  adding: kaggle/working/results/convtasnet/1234/save/ (stored 0%)\n  adding: kaggle/working/results/convtasnet/1234/save/CKPT+2025-04-10+00-10-13+00/ (stored 0%)\n  adding: kaggle/working/results/convtasnet/1234/save/CKPT+2025-04-10+00-10-13+00/scaler.ckpt (deflated 60%)\n  adding: kaggle/working/results/convtasnet/1234/save/CKPT+2025-04-10+00-10-13+00/brain.ckpt (deflated 13%)\n  adding: kaggle/working/results/convtasnet/1234/save/CKPT+2025-04-10+00-10-13+00/CKPT.yaml (deflated 5%)\n  adding: kaggle/working/results/convtasnet/1234/save/CKPT+2025-04-10+00-10-13+00/lr_scheduler.ckpt (deflated 58%)\n  adding: kaggle/working/results/convtasnet/1234/save/CKPT+2025-04-10+00-10-13+00/encoder.ckpt (deflated 11%)\n  adding: kaggle/working/results/convtasnet/1234/save/CKPT+2025-04-10+00-10-13+00/masknet.ckpt (deflated 8%)\n  adding: kaggle/working/results/convtasnet/1234/save/CKPT+2025-04-10+00-10-13+00/optimizer.ckpt (deflated 8%)\n  adding: kaggle/working/results/convtasnet/1234/save/CKPT+2025-04-10+00-10-13+00/counter.ckpt (stored 0%)\n  adding: kaggle/working/results/convtasnet/1234/save/CKPT+2025-04-10+00-10-13+00/decoder.ckpt (deflated 11%)\n  adding: kaggle/working/results/convtasnet/1234/save/audio_results/ (stored 0%)\n  adding: kaggle/working/results/convtasnet/1234/save/audio_results/item0_source1hat.wav (deflated 8%)\n  adding: kaggle/working/results/convtasnet/1234/save/audio_results/item0_mix.wav (deflated 7%)\n  adding: kaggle/working/results/convtasnet/1234/save/audio_results/item0_source2.wav (deflated 7%)\n  adding: kaggle/working/results/convtasnet/1234/save/audio_results/item0_source2hat.wav (deflated 9%)\n  adding: kaggle/working/results/convtasnet/1234/save/audio_results/item0_source1.wav (deflated 100%)\n  adding: kaggle/working/results/convtasnet/1234/hyperparams.yaml (deflated 65%)\n  adding: kaggle/working/results/convtasnet/1234/test_results.csv (deflated 60%)\n  adding: kaggle/working/results/convtasnet/1234/train.py (deflated 76%)\n  adding: kaggle/working/results/convtasnet/1234/log.txt (deflated 92%)\n  adding: kaggle/working/results/convtasnet/1234/train_log.txt (deflated 75%)\n  adding: kaggle/working/results/convtasnet/1234/env.log (deflated 57%)\n","output_type":"stream"}],"execution_count":24}]}